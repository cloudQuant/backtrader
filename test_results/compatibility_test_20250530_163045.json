{
  "test_execution": {
    "start_time": "2025-05-30T16:30:43.243825",
    "end_time": "2025-05-30T16:30:45.084481",
    "duration_seconds": 1.840656,
    "framework_version": "1.0.0"
  },
  "summary": {
    "overall_compatibility": "FAIL",
    "api_compatibility": {
      "total_tests": 67,
      "compatible_count": 67,
      "incompatible_count": 0,
      "compatibility_rate": 100.0
    },
    "behavior_compatibility": {
      "total_tests": 5,
      "equivalent_count": 4,
      "different_count": 1,
      "equivalence_rate": 80.0,
      "average_performance_delta": 0.0
    },
    "critical_issues_count": 1
  },
  "api_test_results": [
    {
      "module": "backtrader/store.py",
      "class": "MetaParams",
      "method": "__new__",
      "compatible": true,
      "type": "signature",
      "old_signature": "(meta, name, bases, dct)",
      "new_signature": "(meta, name, bases, dct)",
      "issues": []
    },
    {
      "module": "backtrader/store.py",
      "class": "MetaParams",
      "method": "doinit",
      "compatible": true,
      "type": "signature",
      "old_signature": "(cls, _obj, *args, **kwargs)",
      "new_signature": "(cls, _obj, *args, **kwargs)",
      "issues": []
    },
    {
      "module": "backtrader/store.py",
      "class": "MetaParams",
      "method": "donew",
      "compatible": true,
      "type": "signature",
      "old_signature": "(cls, *args, **kwargs)",
      "new_signature": "(cls, *args, **kwargs)",
      "issues": []
    },
    {
      "module": "backtrader/store.py",
      "class": "MetaParams",
      "method": "dopostinit",
      "compatible": true,
      "type": "signature",
      "old_signature": "(cls, _obj, *args, **kwargs)",
      "new_signature": "(cls, _obj, *args, **kwargs)",
      "issues": []
    },
    {
      "module": "backtrader/store.py",
      "class": "MetaParams",
      "method": "dopreinit",
      "compatible": true,
      "type": "signature",
      "old_signature": "(cls, _obj, *args, **kwargs)",
      "new_signature": "(cls, _obj, *args, **kwargs)",
      "issues": []
    },
    {
      "module": "backtrader/store.py",
      "class": "MetaParams",
      "method": "doprenew",
      "compatible": true,
      "type": "signature",
      "old_signature": "(cls, *args, **kwargs)",
      "new_signature": "(cls, *args, **kwargs)",
      "issues": []
    },
    {
      "module": "backtrader/store.py",
      "class": "MetaSingleton",
      "method": "__init__",
      "compatible": true,
      "type": "signature",
      "old_signature": "(cls, name, bases, dct)",
      "new_signature": "(cls, name, bases, dct)",
      "issues": []
    },
    {
      "module": "backtrader/store.py",
      "class": "MetaSingleton",
      "method": "__new__",
      "compatible": true,
      "type": "signature",
      "old_signature": "(meta, name, bases, dct)",
      "new_signature": "(meta, name, bases, dct)",
      "issues": []
    },
    {
      "module": "backtrader/store.py",
      "class": "MetaSingleton",
      "method": "doinit",
      "compatible": true,
      "type": "signature",
      "old_signature": "(cls, _obj, *args, **kwargs)",
      "new_signature": "(cls, _obj, *args, **kwargs)",
      "issues": []
    },
    {
      "module": "backtrader/store.py",
      "class": "MetaSingleton",
      "method": "donew",
      "compatible": true,
      "type": "signature",
      "old_signature": "(cls, *args, **kwargs)",
      "new_signature": "(cls, *args, **kwargs)",
      "issues": []
    },
    {
      "module": "backtrader/store.py",
      "class": "MetaSingleton",
      "method": "dopostinit",
      "compatible": true,
      "type": "signature",
      "old_signature": "(cls, _obj, *args, **kwargs)",
      "new_signature": "(cls, _obj, *args, **kwargs)",
      "issues": []
    },
    {
      "module": "backtrader/store.py",
      "class": "MetaSingleton",
      "method": "dopreinit",
      "compatible": true,
      "type": "signature",
      "old_signature": "(cls, _obj, *args, **kwargs)",
      "new_signature": "(cls, _obj, *args, **kwargs)",
      "issues": []
    },
    {
      "module": "backtrader/store.py",
      "class": "MetaSingleton",
      "method": "doprenew",
      "compatible": true,
      "type": "signature",
      "old_signature": "(cls, *args, **kwargs)",
      "new_signature": "(cls, *args, **kwargs)",
      "issues": []
    },
    {
      "module": "backtrader/store.py",
      "class": "Store",
      "method": "__init__",
      "compatible": true,
      "type": "signature",
      "old_signature": "(self)",
      "new_signature": "(self)",
      "issues": []
    },
    {
      "module": "backtrader/store.py",
      "class": "Store",
      "method": "get_notifications",
      "compatible": true,
      "type": "signature",
      "old_signature": "(self)",
      "new_signature": "(self)",
      "issues": []
    },
    {
      "module": "backtrader/store.py",
      "class": "Store",
      "method": "getbroker",
      "compatible": true,
      "type": "signature",
      "old_signature": "(*args, **kwargs)",
      "new_signature": "(*args, **kwargs)",
      "issues": []
    },
    {
      "module": "backtrader/store.py",
      "class": "Store",
      "method": "getdata",
      "compatible": true,
      "type": "signature",
      "old_signature": "(self, *args, **kwargs)",
      "new_signature": "(self, *args, **kwargs)",
      "issues": []
    },
    {
      "module": "backtrader/store.py",
      "class": "Store",
      "method": "put_notification",
      "compatible": true,
      "type": "signature",
      "old_signature": "(self, msg, *args, **kwargs)",
      "new_signature": "(self, msg, *args, **kwargs)",
      "issues": []
    },
    {
      "module": "backtrader/store.py",
      "class": "Store",
      "method": "start",
      "compatible": true,
      "type": "signature",
      "old_signature": "(self, data=None, broker=None)",
      "new_signature": "(self, data=None, broker=None)",
      "issues": []
    },
    {
      "module": "backtrader/store.py",
      "class": "Store",
      "method": "stop",
      "compatible": true,
      "type": "signature",
      "old_signature": "(self)",
      "new_signature": "(self)",
      "issues": []
    },
    {
      "module": "backtrader/broker.py",
      "class": "BrokerBase",
      "method": "BrokerBase",
      "compatible": true,
      "type": "signature",
      "old_signature": "(self, datas=None)",
      "new_signature": "(self, datas=None)",
      "issues": []
    },
    {
      "module": "backtrader/broker.py",
      "class": "BrokerBase",
      "method": "__init__",
      "compatible": true,
      "type": "signature",
      "old_signature": "(self)",
      "new_signature": "(self)",
      "issues": []
    },
    {
      "module": "backtrader/broker.py",
      "class": "BrokerBase",
      "method": "add_order_history",
      "compatible": true,
      "type": "signature",
      "old_signature": "(self, orders, notify=False)",
      "new_signature": "(self, orders, notify=False)",
      "issues": []
    },
    {
      "module": "backtrader/broker.py",
      "class": "BrokerBase",
      "method": "addcommissioninfo",
      "compatible": true,
      "type": "signature",
      "old_signature": "(self, comminfo, name=None)",
      "new_signature": "(self, comminfo, name=None)",
      "issues": []
    },
    {
      "module": "backtrader/broker.py",
      "class": "BrokerBase",
      "method": "buy",
      "compatible": true,
      "type": "signature",
      "old_signature": "(self, owner, data, size, price=None, plimit=None, exectype=None, valid=None, tradeid=0, oco=None, trailamount=None, trailpercent=None, **kwargs)",
      "new_signature": "(self, owner, data, size, price=None, plimit=None, exectype=None, valid=None, tradeid=0, oco=None, trailamount=None, trailpercent=None, **kwargs)",
      "issues": []
    },
    {
      "module": "backtrader/broker.py",
      "class": "BrokerBase",
      "method": "cancel",
      "compatible": true,
      "type": "signature",
      "old_signature": "(self, order)",
      "new_signature": "(self, order)",
      "issues": []
    },
    {
      "module": "backtrader/broker.py",
      "class": "BrokerBase",
      "method": "get_fundmode",
      "compatible": true,
      "type": "signature",
      "old_signature": "(self)",
      "new_signature": "(self)",
      "issues": []
    },
    {
      "module": "backtrader/broker.py",
      "class": "BrokerBase",
      "method": "get_fundshares",
      "compatible": true,
      "type": "signature",
      "old_signature": "(self)",
      "new_signature": "(self)",
      "issues": []
    },
    {
      "module": "backtrader/broker.py",
      "class": "BrokerBase",
      "method": "get_fundvalue",
      "compatible": true,
      "type": "signature",
      "old_signature": "(self)",
      "new_signature": "(self)",
      "issues": []
    },
    {
      "module": "backtrader/broker.py",
      "class": "BrokerBase",
      "method": "getcash",
      "compatible": true,
      "type": "signature",
      "old_signature": "(self)",
      "new_signature": "(self)",
      "issues": []
    },
    {
      "module": "backtrader/broker.py",
      "class": "BrokerBase",
      "method": "getcommissioninfo",
      "compatible": true,
      "type": "signature",
      "old_signature": "(self, data)",
      "new_signature": "(self, data)",
      "issues": []
    },
    {
      "module": "backtrader/broker.py",
      "class": "BrokerBase",
      "method": "getposition",
      "compatible": true,
      "type": "signature",
      "old_signature": "(self, data)",
      "new_signature": "(self, data)",
      "issues": []
    },
    {
      "module": "backtrader/broker.py",
      "class": "BrokerBase",
      "method": "getvalue",
      "compatible": true,
      "type": "signature",
      "old_signature": "(self, datas=None)",
      "new_signature": "(self, datas=None)",
      "issues": []
    },
    {
      "module": "backtrader/broker.py",
      "class": "BrokerBase",
      "method": "init",
      "compatible": true,
      "type": "signature",
      "old_signature": "(self)",
      "new_signature": "(self)",
      "issues": []
    },
    {
      "module": "backtrader/broker.py",
      "class": "BrokerBase",
      "method": "next",
      "compatible": true,
      "type": "signature",
      "old_signature": "(self)",
      "new_signature": "(self)",
      "issues": []
    },
    {
      "module": "backtrader/broker.py",
      "class": "BrokerBase",
      "method": "sell",
      "compatible": true,
      "type": "signature",
      "old_signature": "(self, owner, data, size, price=None, plimit=None, exectype=None, valid=None, tradeid=0, oco=None, trailamount=None, trailpercent=None, **kwargs)",
      "new_signature": "(self, owner, data, size, price=None, plimit=None, exectype=None, valid=None, tradeid=0, oco=None, trailamount=None, trailpercent=None, **kwargs)",
      "issues": []
    },
    {
      "module": "backtrader/broker.py",
      "class": "BrokerBase",
      "method": "set_fund_history",
      "compatible": true,
      "type": "signature",
      "old_signature": "(self, fund)",
      "new_signature": "(self, fund)",
      "issues": []
    },
    {
      "module": "backtrader/broker.py",
      "class": "BrokerBase",
      "method": "set_fundmode",
      "compatible": true,
      "type": "signature",
      "old_signature": "(self, fundmode, fundstartval=None)",
      "new_signature": "(self, fundmode, fundstartval=None)",
      "issues": []
    },
    {
      "module": "backtrader/broker.py",
      "class": "BrokerBase",
      "method": "setcommission",
      "compatible": true,
      "type": "signature",
      "old_signature": "(self, commission=0.0, margin=None, mult=1.0, commtype=None, percabs=True, stocklike=False, interest=0.0, interest_long=False, leverage=1.0, automargin=False, name=None)",
      "new_signature": "(self, commission=0.0, margin=None, mult=1.0, commtype=None, percabs=True, stocklike=False, interest=0.0, interest_long=False, leverage=1.0, automargin=False, name=None)",
      "issues": []
    },
    {
      "module": "backtrader/broker.py",
      "class": "BrokerBase",
      "method": "start",
      "compatible": true,
      "type": "signature",
      "old_signature": "(self)",
      "new_signature": "(self)",
      "issues": []
    },
    {
      "module": "backtrader/broker.py",
      "class": "BrokerBase",
      "method": "stop",
      "compatible": true,
      "type": "signature",
      "old_signature": "(self)",
      "new_signature": "(self)",
      "issues": []
    },
    {
      "module": "backtrader/broker.py",
      "class": "BrokerBase",
      "method": "submit",
      "compatible": true,
      "type": "signature",
      "old_signature": "(self, order)",
      "new_signature": "(self, order)",
      "issues": []
    },
    {
      "module": "backtrader/broker.py",
      "class": "CommInfoBase",
      "method": "__init__",
      "compatible": true,
      "type": "signature",
      "old_signature": "(self)",
      "new_signature": "(self)",
      "issues": []
    },
    {
      "module": "backtrader/broker.py",
      "class": "CommInfoBase",
      "method": "cashadjust",
      "compatible": true,
      "type": "signature",
      "old_signature": "(self, size, price, newprice)",
      "new_signature": "(self, size, price, newprice)",
      "issues": []
    },
    {
      "module": "backtrader/broker.py",
      "class": "CommInfoBase",
      "method": "confirmexec",
      "compatible": true,
      "type": "signature",
      "old_signature": "(self, size, price)",
      "new_signature": "(self, size, price)",
      "issues": []
    },
    {
      "module": "backtrader/broker.py",
      "class": "CommInfoBase",
      "method": "get_credit_interest",
      "compatible": true,
      "type": "signature",
      "old_signature": "(self, data, pos, dt)",
      "new_signature": "(self, data, pos, dt)",
      "issues": []
    },
    {
      "module": "backtrader/broker.py",
      "class": "CommInfoBase",
      "method": "get_leverage",
      "compatible": true,
      "type": "signature",
      "old_signature": "(self)",
      "new_signature": "(self)",
      "issues": []
    },
    {
      "module": "backtrader/broker.py",
      "class": "CommInfoBase",
      "method": "get_margin",
      "compatible": true,
      "type": "signature",
      "old_signature": "(self, price)",
      "new_signature": "(self, price)",
      "issues": []
    },
    {
      "module": "backtrader/broker.py",
      "class": "CommInfoBase",
      "method": "getcommission",
      "compatible": true,
      "type": "signature",
      "old_signature": "(self, size, price)",
      "new_signature": "(self, size, price)",
      "issues": []
    },
    {
      "module": "backtrader/broker.py",
      "class": "CommInfoBase",
      "method": "getoperationcost",
      "compatible": true,
      "type": "signature",
      "old_signature": "(self, size, price)",
      "new_signature": "(self, size, price)",
      "issues": []
    },
    {
      "module": "backtrader/broker.py",
      "class": "CommInfoBase",
      "method": "getsize",
      "compatible": true,
      "type": "signature",
      "old_signature": "(self, price, cash)",
      "new_signature": "(self, price, cash)",
      "issues": []
    },
    {
      "module": "backtrader/broker.py",
      "class": "CommInfoBase",
      "method": "getvalue",
      "compatible": true,
      "type": "signature",
      "old_signature": "(self, position, price)",
      "new_signature": "(self, position, price)",
      "issues": []
    },
    {
      "module": "backtrader/broker.py",
      "class": "CommInfoBase",
      "method": "getvaluesize",
      "compatible": true,
      "type": "signature",
      "old_signature": "(self, size, price)",
      "new_signature": "(self, size, price)",
      "issues": []
    },
    {
      "module": "backtrader/broker.py",
      "class": "CommInfoBase",
      "method": "profitandloss",
      "compatible": true,
      "type": "signature",
      "old_signature": "(self, size, price, newprice)",
      "new_signature": "(self, size, price, newprice)",
      "issues": []
    },
    {
      "module": "backtrader/broker.py",
      "class": "MetaBroker",
      "method": "__init__",
      "compatible": true,
      "type": "signature",
      "old_signature": "(cls, name, bases, dct)",
      "new_signature": "(cls, name, bases, dct)",
      "issues": []
    },
    {
      "module": "backtrader/broker.py",
      "class": "MetaBroker",
      "method": "__new__",
      "compatible": true,
      "type": "signature",
      "old_signature": "(meta, name, bases, dct)",
      "new_signature": "(meta, name, bases, dct)",
      "issues": []
    },
    {
      "module": "backtrader/broker.py",
      "class": "MetaBroker",
      "method": "doinit",
      "compatible": true,
      "type": "signature",
      "old_signature": "(cls, _obj, *args, **kwargs)",
      "new_signature": "(cls, _obj, *args, **kwargs)",
      "issues": []
    },
    {
      "module": "backtrader/broker.py",
      "class": "MetaBroker",
      "method": "donew",
      "compatible": true,
      "type": "signature",
      "old_signature": "(cls, *args, **kwargs)",
      "new_signature": "(cls, *args, **kwargs)",
      "issues": []
    },
    {
      "module": "backtrader/broker.py",
      "class": "MetaBroker",
      "method": "dopostinit",
      "compatible": true,
      "type": "signature",
      "old_signature": "(cls, _obj, *args, **kwargs)",
      "new_signature": "(cls, _obj, *args, **kwargs)",
      "issues": []
    },
    {
      "module": "backtrader/broker.py",
      "class": "MetaBroker",
      "method": "dopreinit",
      "compatible": true,
      "type": "signature",
      "old_signature": "(cls, _obj, *args, **kwargs)",
      "new_signature": "(cls, _obj, *args, **kwargs)",
      "issues": []
    },
    {
      "module": "backtrader/broker.py",
      "class": "MetaBroker",
      "method": "doprenew",
      "compatible": true,
      "type": "signature",
      "old_signature": "(cls, *args, **kwargs)",
      "new_signature": "(cls, *args, **kwargs)",
      "issues": []
    },
    {
      "module": "backtrader/broker.py",
      "class": "MetaParams",
      "method": "__new__",
      "compatible": true,
      "type": "signature",
      "old_signature": "(meta, name, bases, dct)",
      "new_signature": "(meta, name, bases, dct)",
      "issues": []
    },
    {
      "module": "backtrader/broker.py",
      "class": "MetaParams",
      "method": "doinit",
      "compatible": true,
      "type": "signature",
      "old_signature": "(cls, _obj, *args, **kwargs)",
      "new_signature": "(cls, _obj, *args, **kwargs)",
      "issues": []
    },
    {
      "module": "backtrader/broker.py",
      "class": "MetaParams",
      "method": "donew",
      "compatible": true,
      "type": "signature",
      "old_signature": "(cls, *args, **kwargs)",
      "new_signature": "(cls, *args, **kwargs)",
      "issues": []
    },
    {
      "module": "backtrader/broker.py",
      "class": "MetaParams",
      "method": "dopostinit",
      "compatible": true,
      "type": "signature",
      "old_signature": "(cls, _obj, *args, **kwargs)",
      "new_signature": "(cls, _obj, *args, **kwargs)",
      "issues": []
    },
    {
      "module": "backtrader/broker.py",
      "class": "MetaParams",
      "method": "dopreinit",
      "compatible": true,
      "type": "signature",
      "old_signature": "(cls, _obj, *args, **kwargs)",
      "new_signature": "(cls, _obj, *args, **kwargs)",
      "issues": []
    },
    {
      "module": "backtrader/broker.py",
      "class": "MetaParams",
      "method": "doprenew",
      "compatible": true,
      "type": "signature",
      "old_signature": "(cls, *args, **kwargs)",
      "new_signature": "(cls, *args, **kwargs)",
      "issues": []
    }
  ],
  "behavior_test_results": [
    {
      "test_name": "Strategy.__init__",
      "equivalent": false,
      "difference_type": "output",
      "old_execution_time": 0.0,
      "new_execution_time": 0.0,
      "performance_delta": 0,
      "notes": "测试用例: 测试Strategy基本创建"
    },
    {
      "test_name": "SimpleMovingAverage.next",
      "equivalent": true,
      "difference_type": null,
      "old_execution_time": 0.0,
      "new_execution_time": 0.0,
      "performance_delta": 0,
      "notes": "测试用例: 测试SimpleMovingAverage计算"
    },
    {
      "test_name": "LineSeries.__getitem__",
      "equivalent": true,
      "difference_type": null,
      "old_execution_time": 0.0,
      "new_execution_time": 0.0,
      "performance_delta": 0,
      "notes": "测试用例: 测试LineSeries数据访问"
    },
    {
      "test_name": "Store.__new__",
      "equivalent": true,
      "difference_type": null,
      "old_execution_time": 0.0,
      "new_execution_time": 0.0,
      "performance_delta": 0,
      "notes": "测试用例: 测试Store单例行为"
    },
    {
      "test_name": "ParamsBase.params",
      "equivalent": true,
      "difference_type": "performance",
      "old_execution_time": 0.0,
      "new_execution_time": 0.0,
      "performance_delta": 0,
      "notes": "测试用例: 测试参数继承"
    }
  ],
  "critical_issues": [
    {
      "type": "behavior_change",
      "description": "Strategy.__init__ - 行为不一致",
      "severity": "high"
    }
  ],
  "recommendations": [
    "发现1个行为兼容性问题，需要详细验证",
    "有1个输出不一致问题，可能影响用户代码"
  ]
}
{
  "analysis_time": "2025-05-30T16:20:57.952659",
  "summary": {
    "total_files_analyzed": 196,
    "total_metaclass_usages": 260,
    "total_dynamic_creations": 8,
    "total_migration_plans": 35,
    "high_priority_migrations": 86,
    "complex_migrations": 60
  },
  "metaclass_breakdown": {
    "MetaParams": 60,
    "MetaAnalyzer": 10,
    "MetaTimeFrameAnalyzerBase": 3,
    "special_method___new__": 7,
    "MetaBroker": 9,
    "MetaLineSeries": 7,
    "MetaAbstractDataBase": 10,
    "MetaCSVDataBase": 3,
    "MetaIndicator": 47,
    "MetaLineActions": 3,
    "MetaLineIterator": 5,
    "MetaLineRoot": 3,
    "MetaBase": 1,
    "MetaObserver": 15,
    "MetaSingleton": 17,
    "MetaStrategy": 5,
    "MetaSigStrategy": 3,
    "MetaTALibIndicator": 1,
    "MetaCCXTBroker": 3,
    "MetaCryptoBroker": 3,
    "MetaCTPBroker": 3,
    "MetaIBBroker": 3,
    "MetaOandaBroker": 3,
    "MetaVCBroker": 3,
    "MetaCCXTFeed": 3,
    "MetaChainer": 3,
    "MetaCryptoFeed": 3,
    "MetaCTPData": 3,
    "MetaIBData": 3,
    "MetaOandaData": 3,
    "MetaRollOver": 3,
    "MetaVCData": 3,
    "MetaVChartFile": 3,
    "MetaMovAvBase": 3,
    "MetaDataTrades": 3
  },
  "dynamic_creation_breakdown": {
    "type_call": 7,
    "factory_pattern": 1
  },
  "migration_plans": [
    {
      "target_class": "MetaParams",
      "current_pattern": "Metaclass-based: MetaParams",
      "target_pattern": "ParameterDescriptor + configuration system",
      "estimated_effort": 10800,
      "migration_steps": [
        "创建备份分支",
        "编写现有功能的测试用例",
        "分析现有实现的所有功能",
        "实现ParameterDescriptor",
        "创建参数管理器",
        "替换参数访问逻辑",
        "验证参数继承",
        "运行回归测试",
        "性能测试对比",
        "代码审查",
        "文档更新"
      ],
      "prerequisites": [
        "ParameterDescriptor系统完成",
        "参数继承机制测试通过"
      ],
      "risk_factors": [
        "大量使用点(60个)，影响面广"
      ]
    },
    {
      "target_class": "MetaAnalyzer",
      "current_pattern": "Metaclass-based: MetaAnalyzer",
      "target_pattern": "Standard class inheritance",
      "estimated_effort": 300,
      "migration_steps": [
        "创建备份分支",
        "编写现有功能的测试用例",
        "分析现有实现的所有功能",
        "分析MetaAnalyzer的具体功能",
        "设计替代方案",
        "逐步迁移",
        "验证功能完整性",
        "运行回归测试",
        "性能测试对比",
        "代码审查",
        "文档更新"
      ],
      "prerequisites": [],
      "risk_factors": []
    },
    {
      "target_class": "MetaTimeFrameAnalyzerBase",
      "current_pattern": "Metaclass-based: MetaTimeFrameAnalyzerBase",
      "target_pattern": "Standard class inheritance",
      "estimated_effort": 18,
      "migration_steps": [
        "创建备份分支",
        "编写现有功能的测试用例",
        "分析现有实现的所有功能",
        "分析MetaTimeFrameAnalyzerBase的具体功能",
        "设计替代方案",
        "逐步迁移",
        "验证功能完整性",
        "运行回归测试",
        "性能测试对比",
        "代码审查",
        "文档更新"
      ],
      "prerequisites": [],
      "risk_factors": []
    },
    {
      "target_class": "special_method___new__",
      "current_pattern": "Metaclass-based: special_method___new__",
      "target_pattern": "Standard class inheritance",
      "estimated_effort": 98,
      "migration_steps": [
        "创建备份分支",
        "编写现有功能的测试用例",
        "分析现有实现的所有功能",
        "分析special_method___new__的具体功能",
        "设计替代方案",
        "逐步迁移",
        "验证功能完整性",
        "运行回归测试",
        "性能测试对比",
        "代码审查",
        "文档更新"
      ],
      "prerequisites": [],
      "risk_factors": []
    },
    {
      "target_class": "MetaBroker",
      "current_pattern": "Metaclass-based: MetaBroker",
      "target_pattern": "Standard class inheritance",
      "estimated_effort": 243,
      "migration_steps": [
        "创建备份分支",
        "编写现有功能的测试用例",
        "分析现有实现的所有功能",
        "分析MetaBroker的具体功能",
        "设计替代方案",
        "逐步迁移",
        "验证功能完整性",
        "运行回归测试",
        "性能测试对比",
        "代码审查",
        "文档更新"
      ],
      "prerequisites": [],
      "risk_factors": []
    },
    {
      "target_class": "MetaLineSeries",
      "current_pattern": "Metaclass-based: MetaLineSeries",
      "target_pattern": "LineDescriptor + buffer management",
      "estimated_effort": 245,
      "migration_steps": [
        "创建备份分支",
        "编写现有功能的测试用例",
        "分析现有实现的所有功能",
        "实现LineDescriptor",
        "创建LineBuffer系统",
        "替换lines访问逻辑",
        "验证数据访问",
        "运行回归测试",
        "性能测试对比",
        "代码审查",
        "文档更新"
      ],
      "prerequisites": [
        "LineDescriptor系统完成",
        "LineBuffer性能验证通过"
      ],
      "risk_factors": [
        "包含7个复杂使用点",
        "性能敏感，需要仔细验证",
        "涉及核心数据访问逻辑"
      ]
    },
    {
      "target_class": "MetaAbstractDataBase",
      "current_pattern": "Metaclass-based: MetaAbstractDataBase",
      "target_pattern": "Standard class inheritance",
      "estimated_effort": 200,
      "migration_steps": [
        "创建备份分支",
        "编写现有功能的测试用例",
        "分析现有实现的所有功能",
        "分析MetaAbstractDataBase的具体功能",
        "设计替代方案",
        "逐步迁移",
        "验证功能完整性",
        "运行回归测试",
        "性能测试对比",
        "代码审查",
        "文档更新"
      ],
      "prerequisites": [],
      "risk_factors": []
    },
    {
      "target_class": "MetaCSVDataBase",
      "current_pattern": "Metaclass-based: MetaCSVDataBase",
      "target_pattern": "Standard class inheritance",
      "estimated_effort": 18,
      "migration_steps": [
        "创建备份分支",
        "编写现有功能的测试用例",
        "分析现有实现的所有功能",
        "分析MetaCSVDataBase的具体功能",
        "设计替代方案",
        "逐步迁移",
        "验证功能完整性",
        "运行回归测试",
        "性能测试对比",
        "代码审查",
        "文档更新"
      ],
      "prerequisites": [],
      "risk_factors": []
    },
    {
      "target_class": "MetaIndicator",
      "current_pattern": "Metaclass-based: MetaIndicator",
      "target_pattern": "Composition-based indicator system",
      "estimated_effort": 11045,
      "migration_steps": [
        "创建备份分支",
        "编写现有功能的测试用例",
        "分析现有实现的所有功能",
        "分析MetaIndicator的具体功能",
        "设计替代方案",
        "逐步迁移",
        "验证功能完整性",
        "运行回归测试",
        "性能测试对比",
        "代码审查",
        "文档更新"
      ],
      "prerequisites": [],
      "risk_factors": [
        "大量使用点(47个)，影响面广",
        "包含47个复杂使用点",
        "影响所有指标计算",
        "可能影响第三方扩展"
      ]
    },
    {
      "target_class": "MetaLineActions",
      "current_pattern": "Metaclass-based: MetaLineActions",
      "target_pattern": "Standard class inheritance",
      "estimated_effort": 18,
      "migration_steps": [
        "创建备份分支",
        "编写现有功能的测试用例",
        "分析现有实现的所有功能",
        "分析MetaLineActions的具体功能",
        "设计替代方案",
        "逐步迁移",
        "验证功能完整性",
        "运行回归测试",
        "性能测试对比",
        "代码审查",
        "文档更新"
      ],
      "prerequisites": [],
      "risk_factors": []
    },
    {
      "target_class": "MetaLineIterator",
      "current_pattern": "Metaclass-based: MetaLineIterator",
      "target_pattern": "Standard class inheritance",
      "estimated_effort": 50,
      "migration_steps": [
        "创建备份分支",
        "编写现有功能的测试用例",
        "分析现有实现的所有功能",
        "分析MetaLineIterator的具体功能",
        "设计替代方案",
        "逐步迁移",
        "验证功能完整性",
        "运行回归测试",
        "性能测试对比",
        "代码审查",
        "文档更新"
      ],
      "prerequisites": [],
      "risk_factors": []
    },
    {
      "target_class": "MetaLineRoot",
      "current_pattern": "Metaclass-based: MetaLineRoot",
      "target_pattern": "Standard class inheritance",
      "estimated_effort": 18,
      "migration_steps": [
        "创建备份分支",
        "编写现有功能的测试用例",
        "分析现有实现的所有功能",
        "分析MetaLineRoot的具体功能",
        "设计替代方案",
        "逐步迁移",
        "验证功能完整性",
        "运行回归测试",
        "性能测试对比",
        "代码审查",
        "文档更新"
      ],
      "prerequisites": [],
      "risk_factors": []
    },
    {
      "target_class": "MetaBase",
      "current_pattern": "Metaclass-based: MetaBase",
      "target_pattern": "Standard class inheritance",
      "estimated_effort": 5,
      "migration_steps": [
        "创建备份分支",
        "编写现有功能的测试用例",
        "分析现有实现的所有功能",
        "分析MetaBase的具体功能",
        "设计替代方案",
        "逐步迁移",
        "验证功能完整性",
        "运行回归测试",
        "性能测试对比",
        "代码审查",
        "文档更新"
      ],
      "prerequisites": [],
      "risk_factors": [
        "包含1个复杂使用点"
      ]
    },
    {
      "target_class": "MetaObserver",
      "current_pattern": "Metaclass-based: MetaObserver",
      "target_pattern": "Standard class inheritance",
      "estimated_effort": 675,
      "migration_steps": [
        "创建备份分支",
        "编写现有功能的测试用例",
        "分析现有实现的所有功能",
        "分析MetaObserver的具体功能",
        "设计替代方案",
        "逐步迁移",
        "验证功能完整性",
        "运行回归测试",
        "性能测试对比",
        "代码审查",
        "文档更新"
      ],
      "prerequisites": [],
      "risk_factors": [
        "大量使用点(15个)，影响面广"
      ]
    },
    {
      "target_class": "MetaSingleton",
      "current_pattern": "Metaclass-based: MetaSingleton",
      "target_pattern": "SingletonMixin + normal inheritance",
      "estimated_effort": 578,
      "migration_steps": [
        "创建备份分支",
        "编写现有功能的测试用例",
        "分析现有实现的所有功能",
        "实现SingletonMixin基类",
        "替换metaclass=MetaSingleton",
        "验证单例行为",
        "测试线程安全性",
        "运行回归测试",
        "性能测试对比",
        "代码审查",
        "文档更新"
      ],
      "prerequisites": [
        "SingletonMixin基类实现完成"
      ],
      "risk_factors": [
        "大量使用点(17个)，影响面广"
      ]
    },
    {
      "target_class": "MetaStrategy",
      "current_pattern": "Metaclass-based: MetaStrategy",
      "target_pattern": "Dependency injection pattern",
      "estimated_effort": 125,
      "migration_steps": [
        "创建备份分支",
        "编写现有功能的测试用例",
        "分析现有实现的所有功能",
        "分析MetaStrategy的具体功能",
        "设计替代方案",
        "逐步迁移",
        "验证功能完整性",
        "运行回归测试",
        "性能测试对比",
        "代码审查",
        "文档更新"
      ],
      "prerequisites": [],
      "risk_factors": [
        "包含5个复杂使用点",
        "影响策略执行流程",
        "向后兼容性要求高"
      ]
    },
    {
      "target_class": "MetaSigStrategy",
      "current_pattern": "Metaclass-based: MetaSigStrategy",
      "target_pattern": "Standard class inheritance",
      "estimated_effort": 18,
      "migration_steps": [
        "创建备份分支",
        "编写现有功能的测试用例",
        "分析现有实现的所有功能",
        "分析MetaSigStrategy的具体功能",
        "设计替代方案",
        "逐步迁移",
        "验证功能完整性",
        "运行回归测试",
        "性能测试对比",
        "代码审查",
        "文档更新"
      ],
      "prerequisites": [],
      "risk_factors": []
    },
    {
      "target_class": "MetaTALibIndicator",
      "current_pattern": "Metaclass-based: MetaTALibIndicator",
      "target_pattern": "Standard class inheritance",
      "estimated_effort": 2,
      "migration_steps": [
        "创建备份分支",
        "编写现有功能的测试用例",
        "分析现有实现的所有功能",
        "分析MetaTALibIndicator的具体功能",
        "设计替代方案",
        "逐步迁移",
        "验证功能完整性",
        "运行回归测试",
        "性能测试对比",
        "代码审查",
        "文档更新"
      ],
      "prerequisites": [],
      "risk_factors": []
    },
    {
      "target_class": "MetaCCXTBroker",
      "current_pattern": "Metaclass-based: MetaCCXTBroker",
      "target_pattern": "Standard class inheritance",
      "estimated_effort": 18,
      "migration_steps": [
        "创建备份分支",
        "编写现有功能的测试用例",
        "分析现有实现的所有功能",
        "分析MetaCCXTBroker的具体功能",
        "设计替代方案",
        "逐步迁移",
        "验证功能完整性",
        "运行回归测试",
        "性能测试对比",
        "代码审查",
        "文档更新"
      ],
      "prerequisites": [],
      "risk_factors": []
    },
    {
      "target_class": "MetaCryptoBroker",
      "current_pattern": "Metaclass-based: MetaCryptoBroker",
      "target_pattern": "Standard class inheritance",
      "estimated_effort": 18,
      "migration_steps": [
        "创建备份分支",
        "编写现有功能的测试用例",
        "分析现有实现的所有功能",
        "分析MetaCryptoBroker的具体功能",
        "设计替代方案",
        "逐步迁移",
        "验证功能完整性",
        "运行回归测试",
        "性能测试对比",
        "代码审查",
        "文档更新"
      ],
      "prerequisites": [],
      "risk_factors": []
    },
    {
      "target_class": "MetaCTPBroker",
      "current_pattern": "Metaclass-based: MetaCTPBroker",
      "target_pattern": "Standard class inheritance",
      "estimated_effort": 18,
      "migration_steps": [
        "创建备份分支",
        "编写现有功能的测试用例",
        "分析现有实现的所有功能",
        "分析MetaCTPBroker的具体功能",
        "设计替代方案",
        "逐步迁移",
        "验证功能完整性",
        "运行回归测试",
        "性能测试对比",
        "代码审查",
        "文档更新"
      ],
      "prerequisites": [],
      "risk_factors": []
    },
    {
      "target_class": "MetaIBBroker",
      "current_pattern": "Metaclass-based: MetaIBBroker",
      "target_pattern": "Standard class inheritance",
      "estimated_effort": 18,
      "migration_steps": [
        "创建备份分支",
        "编写现有功能的测试用例",
        "分析现有实现的所有功能",
        "分析MetaIBBroker的具体功能",
        "设计替代方案",
        "逐步迁移",
        "验证功能完整性",
        "运行回归测试",
        "性能测试对比",
        "代码审查",
        "文档更新"
      ],
      "prerequisites": [],
      "risk_factors": []
    },
    {
      "target_class": "MetaOandaBroker",
      "current_pattern": "Metaclass-based: MetaOandaBroker",
      "target_pattern": "Standard class inheritance",
      "estimated_effort": 18,
      "migration_steps": [
        "创建备份分支",
        "编写现有功能的测试用例",
        "分析现有实现的所有功能",
        "分析MetaOandaBroker的具体功能",
        "设计替代方案",
        "逐步迁移",
        "验证功能完整性",
        "运行回归测试",
        "性能测试对比",
        "代码审查",
        "文档更新"
      ],
      "prerequisites": [],
      "risk_factors": []
    },
    {
      "target_class": "MetaVCBroker",
      "current_pattern": "Metaclass-based: MetaVCBroker",
      "target_pattern": "Standard class inheritance",
      "estimated_effort": 18,
      "migration_steps": [
        "创建备份分支",
        "编写现有功能的测试用例",
        "分析现有实现的所有功能",
        "分析MetaVCBroker的具体功能",
        "设计替代方案",
        "逐步迁移",
        "验证功能完整性",
        "运行回归测试",
        "性能测试对比",
        "代码审查",
        "文档更新"
      ],
      "prerequisites": [],
      "risk_factors": []
    },
    {
      "target_class": "MetaCCXTFeed",
      "current_pattern": "Metaclass-based: MetaCCXTFeed",
      "target_pattern": "Standard class inheritance",
      "estimated_effort": 18,
      "migration_steps": [
        "创建备份分支",
        "编写现有功能的测试用例",
        "分析现有实现的所有功能",
        "分析MetaCCXTFeed的具体功能",
        "设计替代方案",
        "逐步迁移",
        "验证功能完整性",
        "运行回归测试",
        "性能测试对比",
        "代码审查",
        "文档更新"
      ],
      "prerequisites": [],
      "risk_factors": []
    },
    {
      "target_class": "MetaChainer",
      "current_pattern": "Metaclass-based: MetaChainer",
      "target_pattern": "Standard class inheritance",
      "estimated_effort": 18,
      "migration_steps": [
        "创建备份分支",
        "编写现有功能的测试用例",
        "分析现有实现的所有功能",
        "分析MetaChainer的具体功能",
        "设计替代方案",
        "逐步迁移",
        "验证功能完整性",
        "运行回归测试",
        "性能测试对比",
        "代码审查",
        "文档更新"
      ],
      "prerequisites": [],
      "risk_factors": []
    },
    {
      "target_class": "MetaCryptoFeed",
      "current_pattern": "Metaclass-based: MetaCryptoFeed",
      "target_pattern": "Standard class inheritance",
      "estimated_effort": 18,
      "migration_steps": [
        "创建备份分支",
        "编写现有功能的测试用例",
        "分析现有实现的所有功能",
        "分析MetaCryptoFeed的具体功能",
        "设计替代方案",
        "逐步迁移",
        "验证功能完整性",
        "运行回归测试",
        "性能测试对比",
        "代码审查",
        "文档更新"
      ],
      "prerequisites": [],
      "risk_factors": []
    },
    {
      "target_class": "MetaCTPData",
      "current_pattern": "Metaclass-based: MetaCTPData",
      "target_pattern": "Standard class inheritance",
      "estimated_effort": 18,
      "migration_steps": [
        "创建备份分支",
        "编写现有功能的测试用例",
        "分析现有实现的所有功能",
        "分析MetaCTPData的具体功能",
        "设计替代方案",
        "逐步迁移",
        "验证功能完整性",
        "运行回归测试",
        "性能测试对比",
        "代码审查",
        "文档更新"
      ],
      "prerequisites": [],
      "risk_factors": []
    },
    {
      "target_class": "MetaIBData",
      "current_pattern": "Metaclass-based: MetaIBData",
      "target_pattern": "Standard class inheritance",
      "estimated_effort": 18,
      "migration_steps": [
        "创建备份分支",
        "编写现有功能的测试用例",
        "分析现有实现的所有功能",
        "分析MetaIBData的具体功能",
        "设计替代方案",
        "逐步迁移",
        "验证功能完整性",
        "运行回归测试",
        "性能测试对比",
        "代码审查",
        "文档更新"
      ],
      "prerequisites": [],
      "risk_factors": []
    },
    {
      "target_class": "MetaOandaData",
      "current_pattern": "Metaclass-based: MetaOandaData",
      "target_pattern": "Standard class inheritance",
      "estimated_effort": 18,
      "migration_steps": [
        "创建备份分支",
        "编写现有功能的测试用例",
        "分析现有实现的所有功能",
        "分析MetaOandaData的具体功能",
        "设计替代方案",
        "逐步迁移",
        "验证功能完整性",
        "运行回归测试",
        "性能测试对比",
        "代码审查",
        "文档更新"
      ],
      "prerequisites": [],
      "risk_factors": []
    },
    {
      "target_class": "MetaRollOver",
      "current_pattern": "Metaclass-based: MetaRollOver",
      "target_pattern": "Standard class inheritance",
      "estimated_effort": 18,
      "migration_steps": [
        "创建备份分支",
        "编写现有功能的测试用例",
        "分析现有实现的所有功能",
        "分析MetaRollOver的具体功能",
        "设计替代方案",
        "逐步迁移",
        "验证功能完整性",
        "运行回归测试",
        "性能测试对比",
        "代码审查",
        "文档更新"
      ],
      "prerequisites": [],
      "risk_factors": []
    },
    {
      "target_class": "MetaVCData",
      "current_pattern": "Metaclass-based: MetaVCData",
      "target_pattern": "Standard class inheritance",
      "estimated_effort": 18,
      "migration_steps": [
        "创建备份分支",
        "编写现有功能的测试用例",
        "分析现有实现的所有功能",
        "分析MetaVCData的具体功能",
        "设计替代方案",
        "逐步迁移",
        "验证功能完整性",
        "运行回归测试",
        "性能测试对比",
        "代码审查",
        "文档更新"
      ],
      "prerequisites": [],
      "risk_factors": []
    },
    {
      "target_class": "MetaVChartFile",
      "current_pattern": "Metaclass-based: MetaVChartFile",
      "target_pattern": "Standard class inheritance",
      "estimated_effort": 18,
      "migration_steps": [
        "创建备份分支",
        "编写现有功能的测试用例",
        "分析现有实现的所有功能",
        "分析MetaVChartFile的具体功能",
        "设计替代方案",
        "逐步迁移",
        "验证功能完整性",
        "运行回归测试",
        "性能测试对比",
        "代码审查",
        "文档更新"
      ],
      "prerequisites": [],
      "risk_factors": []
    },
    {
      "target_class": "MetaMovAvBase",
      "current_pattern": "Metaclass-based: MetaMovAvBase",
      "target_pattern": "Standard class inheritance",
      "estimated_effort": 18,
      "migration_steps": [
        "创建备份分支",
        "编写现有功能的测试用例",
        "分析现有实现的所有功能",
        "分析MetaMovAvBase的具体功能",
        "设计替代方案",
        "逐步迁移",
        "验证功能完整性",
        "运行回归测试",
        "性能测试对比",
        "代码审查",
        "文档更新"
      ],
      "prerequisites": [],
      "risk_factors": []
    },
    {
      "target_class": "MetaDataTrades",
      "current_pattern": "Metaclass-based: MetaDataTrades",
      "target_pattern": "Standard class inheritance",
      "estimated_effort": 18,
      "migration_steps": [
        "创建备份分支",
        "编写现有功能的测试用例",
        "分析现有实现的所有功能",
        "分析MetaDataTrades的具体功能",
        "设计替代方案",
        "逐步迁移",
        "验证功能完整性",
        "运行回归测试",
        "性能测试对比",
        "代码审查",
        "文档更新"
      ],
      "prerequisites": [],
      "risk_factors": []
    }
  ],
  "priority_matrix": {
    "MetaParams_MetaAnalyzer": {
      "metaclass_name": "MetaParams",
      "class_name": "MetaAnalyzer",
      "file_path": "backtrader\\analyzer.py",
      "priority": 1,
      "complexity": "medium",
      "migration_strategy": "Replace with ParameterDescriptor",
      "usage_type": "inheritance_regex"
    },
    "MetaAnalyzer_Analyzer": {
      "metaclass_name": "MetaAnalyzer",
      "class_name": "Analyzer",
      "file_path": "backtrader\\analyzer.py",
      "priority": 3,
      "complexity": "medium",
      "migration_strategy": "Manual refactoring required",
      "usage_type": "explicit"
    },
    "MetaTimeFrameAnalyzerBase_TimeFrameAnalyzerBase": {
      "metaclass_name": "MetaTimeFrameAnalyzerBase",
      "class_name": "TimeFrameAnalyzerBase",
      "file_path": "backtrader\\analyzer.py",
      "priority": 3,
      "complexity": "simple",
      "migration_strategy": "Manual refactoring required",
      "usage_type": "explicit"
    },
    "special_method___new___MetaTimeFrameAnalyzerBase": {
      "metaclass_name": "special_method___new__",
      "class_name": "MetaTimeFrameAnalyzerBase",
      "file_path": "backtrader\\analyzer.py",
      "priority": 5,
      "complexity": "simple",
      "migration_strategy": "Manual refactoring required",
      "usage_type": "special_method"
    },
    "MetaAnalyzer_TimeFrameAnalyzerBase": {
      "metaclass_name": "MetaAnalyzer",
      "class_name": "TimeFrameAnalyzerBase",
      "file_path": "backtrader\\analyzer.py",
      "priority": 5,
      "complexity": "medium",
      "migration_strategy": "Manual refactoring required",
      "usage_type": "inheritance_inferred"
    },
    "MetaParams_MetaBroker": {
      "metaclass_name": "MetaParams",
      "class_name": "MetaBroker",
      "file_path": "backtrader\\broker.py",
      "priority": 2,
      "complexity": "medium",
      "migration_strategy": "Replace with ParameterDescriptor",
      "usage_type": "inheritance"
    },
    "MetaBroker_BrokerBase": {
      "metaclass_name": "MetaBroker",
      "class_name": "BrokerBase",
      "file_path": "backtrader\\broker.py",
      "priority": 3,
      "complexity": "medium",
      "migration_strategy": "Implement broker registry pattern",
      "usage_type": "explicit"
    },
    "MetaParams_Cerebro": {
      "metaclass_name": "MetaParams",
      "class_name": "Cerebro",
      "file_path": "backtrader\\cerebro.py",
      "priority": 1,
      "complexity": "medium",
      "migration_strategy": "Replace with ParameterDescriptor",
      "usage_type": "explicit"
    },
    "MetaParams_CommInfoBase": {
      "metaclass_name": "MetaParams",
      "class_name": "CommInfoBase",
      "file_path": "backtrader\\comminfo.py",
      "priority": 1,
      "complexity": "medium",
      "migration_strategy": "Replace with ParameterDescriptor",
      "usage_type": "explicit"
    },
    "MetaLineSeries_DataSeries": {
      "metaclass_name": "MetaLineSeries",
      "class_name": "DataSeries",
      "file_path": "backtrader\\dataseries.py",
      "priority": 3,
      "complexity": "complex",
      "migration_strategy": "Replace with LineDescriptor",
      "usage_type": "inheritance_inferred"
    },
    "MetaAbstractDataBase_AbstractDataBase": {
      "metaclass_name": "MetaAbstractDataBase",
      "class_name": "AbstractDataBase",
      "file_path": "backtrader\\feed.py",
      "priority": 3,
      "complexity": "simple",
      "migration_strategy": "Manual refactoring required",
      "usage_type": "explicit"
    },
    "MetaParams_FeedBase": {
      "metaclass_name": "MetaParams",
      "class_name": "FeedBase",
      "file_path": "backtrader\\feed.py",
      "priority": 1,
      "complexity": "medium",
      "migration_strategy": "Replace with ParameterDescriptor",
      "usage_type": "inheritance_regex"
    },
    "MetaCSVDataBase_CSVDataBase": {
      "metaclass_name": "MetaCSVDataBase",
      "class_name": "CSVDataBase",
      "file_path": "backtrader\\feed.py",
      "priority": 3,
      "complexity": "simple",
      "migration_strategy": "Manual refactoring required",
      "usage_type": "explicit"
    },
    "MetaAbstractDataBase_CSVDataBase": {
      "metaclass_name": "MetaAbstractDataBase",
      "class_name": "CSVDataBase",
      "file_path": "backtrader\\feed.py",
      "priority": 5,
      "complexity": "simple",
      "migration_strategy": "Manual refactoring required",
      "usage_type": "inheritance_inferred"
    },
    "MetaParams_FixedSize": {
      "metaclass_name": "MetaParams",
      "class_name": "FixedSize",
      "file_path": "backtrader\\fillers.py",
      "priority": 1,
      "complexity": "medium",
      "migration_strategy": "Replace with ParameterDescriptor",
      "usage_type": "explicit"
    },
    "MetaParams_FixedBarPerc": {
      "metaclass_name": "MetaParams",
      "class_name": "FixedBarPerc",
      "file_path": "backtrader\\fillers.py",
      "priority": 1,
      "complexity": "medium",
      "migration_strategy": "Replace with ParameterDescriptor",
      "usage_type": "explicit"
    },
    "MetaParams_BarPointPerc": {
      "metaclass_name": "MetaParams",
      "class_name": "BarPointPerc",
      "file_path": "backtrader\\fillers.py",
      "priority": 1,
      "complexity": "medium",
      "migration_strategy": "Replace with ParameterDescriptor",
      "usage_type": "explicit"
    },
    "MetaParams_MetaFilter": {
      "metaclass_name": "MetaParams",
      "class_name": "MetaFilter",
      "file_path": "backtrader\\flt.py",
      "priority": 2,
      "complexity": "medium",
      "migration_strategy": "Replace with ParameterDescriptor",
      "usage_type": "inheritance"
    },
    "MetaParams_Filter": {
      "metaclass_name": "MetaParams",
      "class_name": "Filter",
      "file_path": "backtrader\\flt.py",
      "priority": 1,
      "complexity": "medium",
      "migration_strategy": "Replace with ParameterDescriptor",
      "usage_type": "explicit"
    },
    "MetaIndicator_Indicator": {
      "metaclass_name": "MetaIndicator",
      "class_name": "Indicator",
      "file_path": "backtrader\\indicator.py",
      "priority": 2,
      "complexity": "complex",
      "migration_strategy": "Refactor to composition-based approach",
      "usage_type": "explicit"
    },
    "MetaIndicator_LinePlotterIndicator": {
      "metaclass_name": "MetaIndicator",
      "class_name": "LinePlotterIndicator",
      "file_path": "backtrader\\indicator.py",
      "priority": 4,
      "complexity": "complex",
      "migration_strategy": "Refactor to composition-based approach",
      "usage_type": "inheritance_inferred"
    },
    "MetaLineActions_LineActions": {
      "metaclass_name": "MetaLineActions",
      "class_name": "LineActions",
      "file_path": "backtrader\\linebuffer.py",
      "priority": 3,
      "complexity": "simple",
      "migration_strategy": "Manual refactoring required",
      "usage_type": "explicit"
    },
    "MetaLineIterator_LineIterator": {
      "metaclass_name": "MetaLineIterator",
      "class_name": "LineIterator",
      "file_path": "backtrader\\lineiterator.py",
      "priority": 3,
      "complexity": "simple",
      "migration_strategy": "Manual refactoring required",
      "usage_type": "explicit"
    },
    "MetaLineSeries_LineIterator": {
      "metaclass_name": "MetaLineSeries",
      "class_name": "LineIterator",
      "file_path": "backtrader\\lineiterator.py",
      "priority": 3,
      "complexity": "complex",
      "migration_strategy": "Replace with LineDescriptor",
      "usage_type": "inheritance_inferred"
    },
    "MetaLineIterator_DataAccessor": {
      "metaclass_name": "MetaLineIterator",
      "class_name": "DataAccessor",
      "file_path": "backtrader\\lineiterator.py",
      "priority": 5,
      "complexity": "simple",
      "migration_strategy": "Manual refactoring required",
      "usage_type": "inheritance_inferred"
    },
    "MetaLineIterator_MultiCoupler": {
      "metaclass_name": "MetaLineIterator",
      "class_name": "MultiCoupler",
      "file_path": "backtrader\\lineiterator.py",
      "priority": 5,
      "complexity": "simple",
      "migration_strategy": "Manual refactoring required",
      "usage_type": "inheritance_inferred"
    },
    "MetaParams_MetaLineRoot": {
      "metaclass_name": "MetaParams",
      "class_name": "MetaLineRoot",
      "file_path": "backtrader\\lineroot.py",
      "priority": 1,
      "complexity": "medium",
      "migration_strategy": "Replace with ParameterDescriptor",
      "usage_type": "inheritance_regex"
    },
    "MetaLineRoot_LineRoot": {
      "metaclass_name": "MetaLineRoot",
      "class_name": "LineRoot",
      "file_path": "backtrader\\lineroot.py",
      "priority": 3,
      "complexity": "simple",
      "migration_strategy": "Manual refactoring required",
      "usage_type": "explicit"
    },
    "MetaLineSeries_LineSeries": {
      "metaclass_name": "MetaLineSeries",
      "class_name": "LineSeries",
      "file_path": "backtrader\\lineseries.py",
      "priority": 3,
      "complexity": "complex",
      "migration_strategy": "Replace with LineDescriptor",
      "usage_type": "inheritance_inferred"
    },
    "special_method___new___MetaLineSeries": {
      "metaclass_name": "special_method___new__",
      "class_name": "MetaLineSeries",
      "file_path": "backtrader\\lineseries.py",
      "priority": 5,
      "complexity": "simple",
      "migration_strategy": "Manual refactoring required",
      "usage_type": "special_method"
    },
    "MetaLineSeries_LineSeriesStub": {
      "metaclass_name": "MetaLineSeries",
      "class_name": "LineSeriesStub",
      "file_path": "backtrader\\lineseries.py",
      "priority": 3,
      "complexity": "complex",
      "migration_strategy": "Replace with LineDescriptor",
      "usage_type": "inheritance_inferred"
    },
    "MetaBase_MetaParams": {
      "metaclass_name": "MetaBase",
      "class_name": "MetaParams",
      "file_path": "backtrader\\metabase.py",
      "priority": 1,
      "complexity": "complex",
      "migration_strategy": "Remove and simplify class creation",
      "usage_type": "inheritance_regex"
    },
    "MetaParams_ParamsBase": {
      "metaclass_name": "MetaParams",
      "class_name": "ParamsBase",
      "file_path": "backtrader\\metabase.py",
      "priority": 1,
      "complexity": "medium",
      "migration_strategy": "Replace with ParameterDescriptor",
      "usage_type": "inheritance_regex"
    },
    "MetaObserver_Observer": {
      "metaclass_name": "MetaObserver",
      "class_name": "Observer",
      "file_path": "backtrader\\observer.py",
      "priority": 3,
      "complexity": "medium",
      "migration_strategy": "Manual refactoring required",
      "usage_type": "explicit"
    },
    "MetaParams_OrderBase": {
      "metaclass_name": "MetaParams",
      "class_name": "OrderBase",
      "file_path": "backtrader\\order.py",
      "priority": 1,
      "complexity": "medium",
      "migration_strategy": "Replace with ParameterDescriptor",
      "usage_type": "explicit"
    },
    "MetaParams__BaseResampler": {
      "metaclass_name": "MetaParams",
      "class_name": "_BaseResampler",
      "file_path": "backtrader\\resamplerfilter.py",
      "priority": 1,
      "complexity": "medium",
      "migration_strategy": "Replace with ParameterDescriptor",
      "usage_type": "inheritance_regex"
    },
    "MetaParams_Sizer": {
      "metaclass_name": "MetaParams",
      "class_name": "Sizer",
      "file_path": "backtrader\\sizer.py",
      "priority": 1,
      "complexity": "medium",
      "migration_strategy": "Replace with ParameterDescriptor",
      "usage_type": "explicit"
    },
    "MetaParams_MetaSingleton": {
      "metaclass_name": "MetaParams",
      "class_name": "MetaSingleton",
      "file_path": "backtrader\\stores\\vcstore.py",
      "priority": 1,
      "complexity": "medium",
      "migration_strategy": "Replace with ParameterDescriptor",
      "usage_type": "inheritance_regex"
    },
    "MetaSingleton_Store": {
      "metaclass_name": "MetaSingleton",
      "class_name": "Store",
      "file_path": "backtrader\\store.py",
      "priority": 2,
      "complexity": "simple",
      "migration_strategy": "Replace with SingletonMixin",
      "usage_type": "explicit"
    },
    "MetaStrategy_Strategy": {
      "metaclass_name": "MetaStrategy",
      "class_name": "Strategy",
      "file_path": "backtrader\\strategy.py",
      "priority": 2,
      "complexity": "complex",
      "migration_strategy": "Use dependency injection pattern",
      "usage_type": "explicit"
    },
    "MetaSigStrategy_SignalStrategy": {
      "metaclass_name": "MetaSigStrategy",
      "class_name": "SignalStrategy",
      "file_path": "backtrader\\strategy.py",
      "priority": 3,
      "complexity": "simple",
      "migration_strategy": "Manual refactoring required",
      "usage_type": "explicit"
    },
    "special_method___new___MetaStrategy": {
      "metaclass_name": "special_method___new__",
      "class_name": "MetaStrategy",
      "file_path": "backtrader\\strategy.py",
      "priority": 5,
      "complexity": "simple",
      "migration_strategy": "Manual refactoring required",
      "usage_type": "special_method"
    },
    "special_method___new___MetaSigStrategy": {
      "metaclass_name": "special_method___new__",
      "class_name": "MetaSigStrategy",
      "file_path": "backtrader\\strategy.py",
      "priority": 5,
      "complexity": "simple",
      "migration_strategy": "Manual refactoring required",
      "usage_type": "special_method"
    },
    "MetaStrategy_SignalStrategy": {
      "metaclass_name": "MetaStrategy",
      "class_name": "SignalStrategy",
      "file_path": "backtrader\\strategy.py",
      "priority": 4,
      "complexity": "complex",
      "migration_strategy": "Use dependency injection pattern",
      "usage_type": "inheritance_inferred"
    },
    "MetaStrategy_BtApiStrategy": {
      "metaclass_name": "MetaStrategy",
      "class_name": "BtApiStrategy",
      "file_path": "backtrader\\strategy.py",
      "priority": 4,
      "complexity": "complex",
      "migration_strategy": "Use dependency injection pattern",
      "usage_type": "inheritance_inferred"
    },
    "MetaTALibIndicator__TALibIndicator": {
      "metaclass_name": "MetaTALibIndicator",
      "class_name": "_TALibIndicator",
      "file_path": "backtrader\\talib.py",
      "priority": 3,
      "complexity": "simple",
      "migration_strategy": "Manual refactoring required",
      "usage_type": "inheritance_regex"
    },
    "MetaParams_Timer": {
      "metaclass_name": "MetaParams",
      "class_name": "Timer",
      "file_path": "backtrader\\timer.py",
      "priority": 1,
      "complexity": "medium",
      "migration_strategy": "Replace with ParameterDescriptor",
      "usage_type": "explicit"
    },
    "MetaParams_TradingCalendarBase": {
      "metaclass_name": "MetaParams",
      "class_name": "TradingCalendarBase",
      "file_path": "backtrader\\tradingcal.py",
      "priority": 1,
      "complexity": "medium",
      "migration_strategy": "Replace with ParameterDescriptor",
      "usage_type": "explicit"
    },
    "MetaParams_WriterBase": {
      "metaclass_name": "MetaParams",
      "class_name": "WriterBase",
      "file_path": "backtrader\\writer.py",
      "priority": 1,
      "complexity": "medium",
      "migration_strategy": "Replace with ParameterDescriptor",
      "usage_type": "inheritance_regex"
    },
    "MetaAnalyzer_AnnualReturn": {
      "metaclass_name": "MetaAnalyzer",
      "class_name": "AnnualReturn",
      "file_path": "backtrader\\analyzers\\annualreturn.py",
      "priority": 5,
      "complexity": "medium",
      "migration_strategy": "Manual refactoring required",
      "usage_type": "inheritance_inferred"
    },
    "MetaAnalyzer_MyAnnualReturn": {
      "metaclass_name": "MetaAnalyzer",
      "class_name": "MyAnnualReturn",
      "file_path": "backtrader\\analyzers\\annualreturn.py",
      "priority": 5,
      "complexity": "medium",
      "migration_strategy": "Manual refactoring required",
      "usage_type": "inheritance_inferred"
    },
    "MetaAnalyzer_SharpeRatio": {
      "metaclass_name": "MetaAnalyzer",
      "class_name": "SharpeRatio",
      "file_path": "backtrader\\analyzers\\sharpe.py",
      "priority": 5,
      "complexity": "medium",
      "migration_strategy": "Manual refactoring required",
      "usage_type": "inheritance_inferred"
    },
    "MetaAnalyzer_SQN": {
      "metaclass_name": "MetaAnalyzer",
      "class_name": "SQN",
      "file_path": "backtrader\\analyzers\\sqn.py",
      "priority": 5,
      "complexity": "medium",
      "migration_strategy": "Manual refactoring required",
      "usage_type": "inheritance_inferred"
    },
    "MetaAnalyzer_TotalValue": {
      "metaclass_name": "MetaAnalyzer",
      "class_name": "TotalValue",
      "file_path": "backtrader\\analyzers\\total_value.py",
      "priority": 5,
      "complexity": "medium",
      "migration_strategy": "Manual refactoring required",
      "usage_type": "inheritance_inferred"
    },
    "MetaAnalyzer_TradeAnalyzer": {
      "metaclass_name": "MetaAnalyzer",
      "class_name": "TradeAnalyzer",
      "file_path": "backtrader\\analyzers\\tradeanalyzer.py",
      "priority": 5,
      "complexity": "medium",
      "migration_strategy": "Manual refactoring required",
      "usage_type": "inheritance_inferred"
    },
    "MetaCCXTBroker_CCXTBroker": {
      "metaclass_name": "MetaCCXTBroker",
      "class_name": "CCXTBroker",
      "file_path": "backtrader\\brokers\\ccxtbroker.py",
      "priority": 3,
      "complexity": "simple",
      "migration_strategy": "Manual refactoring required",
      "usage_type": "explicit"
    },
    "MetaBroker_CCXTBroker": {
      "metaclass_name": "MetaBroker",
      "class_name": "CCXTBroker",
      "file_path": "backtrader\\brokers\\ccxtbroker.py",
      "priority": 5,
      "complexity": "medium",
      "migration_strategy": "Implement broker registry pattern",
      "usage_type": "inheritance_inferred"
    },
    "MetaCryptoBroker_CryptoBroker": {
      "metaclass_name": "MetaCryptoBroker",
      "class_name": "CryptoBroker",
      "file_path": "backtrader\\brokers\\cryptobroker.py",
      "priority": 3,
      "complexity": "simple",
      "migration_strategy": "Manual refactoring required",
      "usage_type": "explicit"
    },
    "MetaBroker_CryptoBroker": {
      "metaclass_name": "MetaBroker",
      "class_name": "CryptoBroker",
      "file_path": "backtrader\\brokers\\cryptobroker.py",
      "priority": 5,
      "complexity": "medium",
      "migration_strategy": "Implement broker registry pattern",
      "usage_type": "inheritance_inferred"
    },
    "MetaCTPBroker_CTPBroker": {
      "metaclass_name": "MetaCTPBroker",
      "class_name": "CTPBroker",
      "file_path": "backtrader\\brokers\\ctpbroker.py",
      "priority": 3,
      "complexity": "simple",
      "migration_strategy": "Manual refactoring required",
      "usage_type": "explicit"
    },
    "MetaBroker_CTPBroker": {
      "metaclass_name": "MetaBroker",
      "class_name": "CTPBroker",
      "file_path": "backtrader\\brokers\\ctpbroker.py",
      "priority": 5,
      "complexity": "medium",
      "migration_strategy": "Implement broker registry pattern",
      "usage_type": "inheritance_inferred"
    },
    "MetaIBBroker_IBBroker": {
      "metaclass_name": "MetaIBBroker",
      "class_name": "IBBroker",
      "file_path": "backtrader\\brokers\\ibbroker.py",
      "priority": 3,
      "complexity": "simple",
      "migration_strategy": "Manual refactoring required",
      "usage_type": "explicit"
    },
    "MetaBroker_IBBroker": {
      "metaclass_name": "MetaBroker",
      "class_name": "IBBroker",
      "file_path": "backtrader\\brokers\\ibbroker.py",
      "priority": 5,
      "complexity": "medium",
      "migration_strategy": "Implement broker registry pattern",
      "usage_type": "inheritance_inferred"
    },
    "MetaOandaBroker_OandaBroker": {
      "metaclass_name": "MetaOandaBroker",
      "class_name": "OandaBroker",
      "file_path": "backtrader\\brokers\\oandabroker.py",
      "priority": 3,
      "complexity": "simple",
      "migration_strategy": "Manual refactoring required",
      "usage_type": "explicit"
    },
    "MetaBroker_OandaBroker": {
      "metaclass_name": "MetaBroker",
      "class_name": "OandaBroker",
      "file_path": "backtrader\\brokers\\oandabroker.py",
      "priority": 5,
      "complexity": "medium",
      "migration_strategy": "Implement broker registry pattern",
      "usage_type": "inheritance_inferred"
    },
    "MetaVCBroker_VCBroker": {
      "metaclass_name": "MetaVCBroker",
      "class_name": "VCBroker",
      "file_path": "backtrader\\brokers\\vcbroker.py",
      "priority": 3,
      "complexity": "simple",
      "migration_strategy": "Manual refactoring required",
      "usage_type": "explicit"
    },
    "MetaBroker_VCBroker": {
      "metaclass_name": "MetaBroker",
      "class_name": "VCBroker",
      "file_path": "backtrader\\brokers\\vcbroker.py",
      "priority": 5,
      "complexity": "medium",
      "migration_strategy": "Implement broker registry pattern",
      "usage_type": "inheritance_inferred"
    },
    "MetaCCXTFeed_CCXTFeed": {
      "metaclass_name": "MetaCCXTFeed",
      "class_name": "CCXTFeed",
      "file_path": "backtrader\\feeds\\ccxtfeed.py",
      "priority": 3,
      "complexity": "simple",
      "migration_strategy": "Manual refactoring required",
      "usage_type": "explicit"
    },
    "MetaAbstractDataBase_CCXTFeed": {
      "metaclass_name": "MetaAbstractDataBase",
      "class_name": "CCXTFeed",
      "file_path": "backtrader\\feeds\\ccxtfeed.py",
      "priority": 5,
      "complexity": "simple",
      "migration_strategy": "Manual refactoring required",
      "usage_type": "inheritance_inferred"
    },
    "MetaChainer_Chainer": {
      "metaclass_name": "MetaChainer",
      "class_name": "Chainer",
      "file_path": "backtrader\\feeds\\chainer.py",
      "priority": 3,
      "complexity": "simple",
      "migration_strategy": "Manual refactoring required",
      "usage_type": "explicit"
    },
    "MetaCryptoFeed_CryptoFeed": {
      "metaclass_name": "MetaCryptoFeed",
      "class_name": "CryptoFeed",
      "file_path": "backtrader\\feeds\\cryptofeed.py",
      "priority": 3,
      "complexity": "simple",
      "migration_strategy": "Manual refactoring required",
      "usage_type": "explicit"
    },
    "MetaAbstractDataBase_CryptoFeed": {
      "metaclass_name": "MetaAbstractDataBase",
      "class_name": "CryptoFeed",
      "file_path": "backtrader\\feeds\\cryptofeed.py",
      "priority": 5,
      "complexity": "simple",
      "migration_strategy": "Manual refactoring required",
      "usage_type": "inheritance_inferred"
    },
    "MetaCTPData_CTPData": {
      "metaclass_name": "MetaCTPData",
      "class_name": "CTPData",
      "file_path": "backtrader\\feeds\\ctpdata.py",
      "priority": 3,
      "complexity": "simple",
      "migration_strategy": "Manual refactoring required",
      "usage_type": "explicit"
    },
    "MetaAbstractDataBase_CTPData": {
      "metaclass_name": "MetaAbstractDataBase",
      "class_name": "CTPData",
      "file_path": "backtrader\\feeds\\ctpdata.py",
      "priority": 5,
      "complexity": "simple",
      "migration_strategy": "Manual refactoring required",
      "usage_type": "inheritance_inferred"
    },
    "MetaIBData_IBData": {
      "metaclass_name": "MetaIBData",
      "class_name": "IBData",
      "file_path": "backtrader\\feeds\\ibdata.py",
      "priority": 3,
      "complexity": "simple",
      "migration_strategy": "Manual refactoring required",
      "usage_type": "explicit"
    },
    "MetaAbstractDataBase_IBData": {
      "metaclass_name": "MetaAbstractDataBase",
      "class_name": "IBData",
      "file_path": "backtrader\\feeds\\ibdata.py",
      "priority": 5,
      "complexity": "simple",
      "migration_strategy": "Manual refactoring required",
      "usage_type": "inheritance_inferred"
    },
    "MetaOandaData_OandaData": {
      "metaclass_name": "MetaOandaData",
      "class_name": "OandaData",
      "file_path": "backtrader\\feeds\\oanda.py",
      "priority": 3,
      "complexity": "simple",
      "migration_strategy": "Manual refactoring required",
      "usage_type": "explicit"
    },
    "MetaAbstractDataBase_OandaData": {
      "metaclass_name": "MetaAbstractDataBase",
      "class_name": "OandaData",
      "file_path": "backtrader\\feeds\\oanda.py",
      "priority": 5,
      "complexity": "simple",
      "migration_strategy": "Manual refactoring required",
      "usage_type": "inheritance_inferred"
    },
    "MetaRollOver_RollOver": {
      "metaclass_name": "MetaRollOver",
      "class_name": "RollOver",
      "file_path": "backtrader\\feeds\\rollover.py",
      "priority": 3,
      "complexity": "simple",
      "migration_strategy": "Manual refactoring required",
      "usage_type": "explicit"
    },
    "MetaVCData_VCData": {
      "metaclass_name": "MetaVCData",
      "class_name": "VCData",
      "file_path": "backtrader\\feeds\\vcdata.py",
      "priority": 3,
      "complexity": "simple",
      "migration_strategy": "Manual refactoring required",
      "usage_type": "explicit"
    },
    "MetaAbstractDataBase_VCData": {
      "metaclass_name": "MetaAbstractDataBase",
      "class_name": "VCData",
      "file_path": "backtrader\\feeds\\vcdata.py",
      "priority": 5,
      "complexity": "simple",
      "migration_strategy": "Manual refactoring required",
      "usage_type": "inheritance_inferred"
    },
    "MetaVChartFile_VChartFile": {
      "metaclass_name": "MetaVChartFile",
      "class_name": "VChartFile",
      "file_path": "backtrader\\feeds\\vchartfile.py",
      "priority": 3,
      "complexity": "simple",
      "migration_strategy": "Manual refactoring required",
      "usage_type": "explicit"
    },
    "MetaParams_DaySplitterClose": {
      "metaclass_name": "MetaParams",
      "class_name": "DaySplitterClose",
      "file_path": "backtrader\\filters\\bsplitter.py",
      "priority": 1,
      "complexity": "medium",
      "migration_strategy": "Replace with ParameterDescriptor",
      "usage_type": "inheritance_regex"
    },
    "MetaParams_CalendarDays": {
      "metaclass_name": "MetaParams",
      "class_name": "CalendarDays",
      "file_path": "backtrader\\filters\\calendardays.py",
      "priority": 1,
      "complexity": "medium",
      "migration_strategy": "Replace with ParameterDescriptor",
      "usage_type": "inheritance_regex"
    },
    "MetaParams_Renko": {
      "metaclass_name": "MetaParams",
      "class_name": "Renko",
      "file_path": "backtrader\\filters\\renko.py",
      "priority": 3,
      "complexity": "medium",
      "migration_strategy": "Replace with ParameterDescriptor",
      "usage_type": "inheritance_inferred"
    },
    "MetaParams_SessionFiller": {
      "metaclass_name": "MetaParams",
      "class_name": "SessionFiller",
      "file_path": "backtrader\\filters\\session.py",
      "priority": 1,
      "complexity": "medium",
      "migration_strategy": "Replace with ParameterDescriptor",
      "usage_type": "inheritance_regex"
    },
    "MetaParams_SessionFilterSimple": {
      "metaclass_name": "MetaParams",
      "class_name": "SessionFilterSimple",
      "file_path": "backtrader\\filters\\session.py",
      "priority": 1,
      "complexity": "medium",
      "migration_strategy": "Replace with ParameterDescriptor",
      "usage_type": "inheritance_regex"
    },
    "MetaParams_SessionFilter": {
      "metaclass_name": "MetaParams",
      "class_name": "SessionFilter",
      "file_path": "backtrader\\filters\\session.py",
      "priority": 1,
      "complexity": "medium",
      "migration_strategy": "Replace with ParameterDescriptor",
      "usage_type": "inheritance_regex"
    },
    "MetaIndicator__AroonBase": {
      "metaclass_name": "MetaIndicator",
      "class_name": "_AroonBase",
      "file_path": "backtrader\\indicators\\aroon.py",
      "priority": 4,
      "complexity": "complex",
      "migration_strategy": "Refactor to composition-based approach",
      "usage_type": "inheritance_inferred"
    },
    "MetaIndicator_TrueHigh": {
      "metaclass_name": "MetaIndicator",
      "class_name": "TrueHigh",
      "file_path": "backtrader\\indicators\\atr.py",
      "priority": 4,
      "complexity": "complex",
      "migration_strategy": "Refactor to composition-based approach",
      "usage_type": "inheritance_inferred"
    },
    "MetaIndicator_TrueLow": {
      "metaclass_name": "MetaIndicator",
      "class_name": "TrueLow",
      "file_path": "backtrader\\indicators\\atr.py",
      "priority": 4,
      "complexity": "complex",
      "migration_strategy": "Refactor to composition-based approach",
      "usage_type": "inheritance_inferred"
    },
    "MetaIndicator_TrueRange": {
      "metaclass_name": "MetaIndicator",
      "class_name": "TrueRange",
      "file_path": "backtrader\\indicators\\atr.py",
      "priority": 4,
      "complexity": "complex",
      "migration_strategy": "Refactor to composition-based approach",
      "usage_type": "inheritance_inferred"
    },
    "MetaIndicator_AverageTrueRange": {
      "metaclass_name": "MetaIndicator",
      "class_name": "AverageTrueRange",
      "file_path": "backtrader\\indicators\\atr.py",
      "priority": 4,
      "complexity": "complex",
      "migration_strategy": "Refactor to composition-based approach",
      "usage_type": "inheritance_inferred"
    },
    "MetaIndicator_PeriodN": {
      "metaclass_name": "MetaIndicator",
      "class_name": "PeriodN",
      "file_path": "backtrader\\indicators\\basicops.py",
      "priority": 4,
      "complexity": "complex",
      "migration_strategy": "Refactor to composition-based approach",
      "usage_type": "inheritance_inferred"
    },
    "MetaIndicator_Accum": {
      "metaclass_name": "MetaIndicator",
      "class_name": "Accum",
      "file_path": "backtrader\\indicators\\basicops.py",
      "priority": 4,
      "complexity": "complex",
      "migration_strategy": "Refactor to composition-based approach",
      "usage_type": "inheritance_inferred"
    },
    "MetaIndicator_BollingerBands": {
      "metaclass_name": "MetaIndicator",
      "class_name": "BollingerBands",
      "file_path": "backtrader\\indicators\\bollinger.py",
      "priority": 4,
      "complexity": "complex",
      "migration_strategy": "Refactor to composition-based approach",
      "usage_type": "inheritance_inferred"
    },
    "MetaIndicator_CommodityChannelIndex": {
      "metaclass_name": "MetaIndicator",
      "class_name": "CommodityChannelIndex",
      "file_path": "backtrader\\indicators\\cci.py",
      "priority": 4,
      "complexity": "complex",
      "migration_strategy": "Refactor to composition-based approach",
      "usage_type": "inheritance_inferred"
    },
    "MetaIndicator_NonZeroDifference": {
      "metaclass_name": "MetaIndicator",
      "class_name": "NonZeroDifference",
      "file_path": "backtrader\\indicators\\crossover.py",
      "priority": 4,
      "complexity": "complex",
      "migration_strategy": "Refactor to composition-based approach",
      "usage_type": "inheritance_inferred"
    },
    "MetaIndicator__CrossBase": {
      "metaclass_name": "MetaIndicator",
      "class_name": "_CrossBase",
      "file_path": "backtrader\\indicators\\crossover.py",
      "priority": 4,
      "complexity": "complex",
      "migration_strategy": "Refactor to composition-based approach",
      "usage_type": "inheritance_inferred"
    },
    "MetaIndicator_CrossOver": {
      "metaclass_name": "MetaIndicator",
      "class_name": "CrossOver",
      "file_path": "backtrader\\indicators\\crossover.py",
      "priority": 4,
      "complexity": "complex",
      "migration_strategy": "Refactor to composition-based approach",
      "usage_type": "inheritance_inferred"
    },
    "MetaIndicator_StandardDeviation": {
      "metaclass_name": "MetaIndicator",
      "class_name": "StandardDeviation",
      "file_path": "backtrader\\indicators\\deviation.py",
      "priority": 4,
      "complexity": "complex",
      "migration_strategy": "Refactor to composition-based approach",
      "usage_type": "inheritance_inferred"
    },
    "MetaIndicator_MeanDeviation": {
      "metaclass_name": "MetaIndicator",
      "class_name": "MeanDeviation",
      "file_path": "backtrader\\indicators\\deviation.py",
      "priority": 4,
      "complexity": "complex",
      "migration_strategy": "Refactor to composition-based approach",
      "usage_type": "inheritance_inferred"
    },
    "MetaIndicator_UpMove": {
      "metaclass_name": "MetaIndicator",
      "class_name": "UpMove",
      "file_path": "backtrader\\indicators\\directionalmove.py",
      "priority": 4,
      "complexity": "complex",
      "migration_strategy": "Refactor to composition-based approach",
      "usage_type": "inheritance_inferred"
    },
    "MetaIndicator_DownMove": {
      "metaclass_name": "MetaIndicator",
      "class_name": "DownMove",
      "file_path": "backtrader\\indicators\\directionalmove.py",
      "priority": 4,
      "complexity": "complex",
      "migration_strategy": "Refactor to composition-based approach",
      "usage_type": "inheritance_inferred"
    },
    "MetaIndicator__DirectionalIndicator": {
      "metaclass_name": "MetaIndicator",
      "class_name": "_DirectionalIndicator",
      "file_path": "backtrader\\indicators\\directionalmove.py",
      "priority": 4,
      "complexity": "complex",
      "migration_strategy": "Refactor to composition-based approach",
      "usage_type": "inheritance_inferred"
    },
    "MetaIndicator_DetrendedPriceOscillator": {
      "metaclass_name": "MetaIndicator",
      "class_name": "DetrendedPriceOscillator",
      "file_path": "backtrader\\indicators\\dpo.py",
      "priority": 4,
      "complexity": "complex",
      "migration_strategy": "Refactor to composition-based approach",
      "usage_type": "inheritance_inferred"
    },
    "MetaIndicator_DV2": {
      "metaclass_name": "MetaIndicator",
      "class_name": "DV2",
      "file_path": "backtrader\\indicators\\dv2.py",
      "priority": 4,
      "complexity": "complex",
      "migration_strategy": "Refactor to composition-based approach",
      "usage_type": "inheritance_inferred"
    },
    "MetaIndicator__EnvelopeBase": {
      "metaclass_name": "MetaIndicator",
      "class_name": "_EnvelopeBase",
      "file_path": "backtrader\\indicators\\envelope.py",
      "priority": 4,
      "complexity": "complex",
      "migration_strategy": "Refactor to composition-based approach",
      "usage_type": "inheritance_inferred"
    },
    "MetaMovAvBase_MovingAverageBase": {
      "metaclass_name": "MetaMovAvBase",
      "class_name": "MovingAverageBase",
      "file_path": "backtrader\\indicators\\mabase.py",
      "priority": 3,
      "complexity": "simple",
      "migration_strategy": "Manual refactoring required",
      "usage_type": "explicit"
    },
    "special_method___new___MetaMovAvBase": {
      "metaclass_name": "special_method___new__",
      "class_name": "MetaMovAvBase",
      "file_path": "backtrader\\indicators\\mabase.py",
      "priority": 5,
      "complexity": "simple",
      "migration_strategy": "Manual refactoring required",
      "usage_type": "special_method"
    },
    "MetaIndicator_MovingAverageBase": {
      "metaclass_name": "MetaIndicator",
      "class_name": "MovingAverageBase",
      "file_path": "backtrader\\indicators\\mabase.py",
      "priority": 4,
      "complexity": "complex",
      "migration_strategy": "Refactor to composition-based approach",
      "usage_type": "inheritance_inferred"
    },
    "MetaIndicator_MACD": {
      "metaclass_name": "MetaIndicator",
      "class_name": "MACD",
      "file_path": "backtrader\\indicators\\macd.py",
      "priority": 4,
      "complexity": "complex",
      "migration_strategy": "Refactor to composition-based approach",
      "usage_type": "inheritance_inferred"
    },
    "MetaIndicator_Momentum": {
      "metaclass_name": "MetaIndicator",
      "class_name": "Momentum",
      "file_path": "backtrader\\indicators\\momentum.py",
      "priority": 4,
      "complexity": "complex",
      "migration_strategy": "Refactor to composition-based approach",
      "usage_type": "inheritance_inferred"
    },
    "MetaIndicator_MomentumOscillator": {
      "metaclass_name": "MetaIndicator",
      "class_name": "MomentumOscillator",
      "file_path": "backtrader\\indicators\\momentum.py",
      "priority": 4,
      "complexity": "complex",
      "migration_strategy": "Refactor to composition-based approach",
      "usage_type": "inheritance_inferred"
    },
    "MetaIndicator_RateOfChange": {
      "metaclass_name": "MetaIndicator",
      "class_name": "RateOfChange",
      "file_path": "backtrader\\indicators\\momentum.py",
      "priority": 4,
      "complexity": "complex",
      "migration_strategy": "Refactor to composition-based approach",
      "usage_type": "inheritance_inferred"
    },
    "MetaIndicator_RateOfChange100": {
      "metaclass_name": "MetaIndicator",
      "class_name": "RateOfChange100",
      "file_path": "backtrader\\indicators\\momentum.py",
      "priority": 4,
      "complexity": "complex",
      "migration_strategy": "Refactor to composition-based approach",
      "usage_type": "inheritance_inferred"
    },
    "MetaIndicator_OscillatorMixIn": {
      "metaclass_name": "MetaIndicator",
      "class_name": "OscillatorMixIn",
      "file_path": "backtrader\\indicators\\oscillator.py",
      "priority": 4,
      "complexity": "complex",
      "migration_strategy": "Refactor to composition-based approach",
      "usage_type": "inheritance_inferred"
    },
    "MetaIndicator_Oscillator": {
      "metaclass_name": "MetaIndicator",
      "class_name": "Oscillator",
      "file_path": "backtrader\\indicators\\oscillator.py",
      "priority": 4,
      "complexity": "complex",
      "migration_strategy": "Refactor to composition-based approach",
      "usage_type": "inheritance_inferred"
    },
    "MetaIndicator_PercentChange": {
      "metaclass_name": "MetaIndicator",
      "class_name": "PercentChange",
      "file_path": "backtrader\\indicators\\percentchange.py",
      "priority": 4,
      "complexity": "complex",
      "migration_strategy": "Refactor to composition-based approach",
      "usage_type": "inheritance_inferred"
    },
    "MetaIndicator_PivotPoint": {
      "metaclass_name": "MetaIndicator",
      "class_name": "PivotPoint",
      "file_path": "backtrader\\indicators\\pivotpoint.py",
      "priority": 4,
      "complexity": "complex",
      "migration_strategy": "Refactor to composition-based approach",
      "usage_type": "inheritance_inferred"
    },
    "MetaIndicator_FibonacciPivotPoint": {
      "metaclass_name": "MetaIndicator",
      "class_name": "FibonacciPivotPoint",
      "file_path": "backtrader\\indicators\\pivotpoint.py",
      "priority": 4,
      "complexity": "complex",
      "migration_strategy": "Refactor to composition-based approach",
      "usage_type": "inheritance_inferred"
    },
    "MetaIndicator_DemarkPivotPoint": {
      "metaclass_name": "MetaIndicator",
      "class_name": "DemarkPivotPoint",
      "file_path": "backtrader\\indicators\\pivotpoint.py",
      "priority": 4,
      "complexity": "complex",
      "migration_strategy": "Refactor to composition-based approach",
      "usage_type": "inheritance_inferred"
    },
    "MetaIndicator_PrettyGoodOscillator": {
      "metaclass_name": "MetaIndicator",
      "class_name": "PrettyGoodOscillator",
      "file_path": "backtrader\\indicators\\prettygoodoscillator.py",
      "priority": 4,
      "complexity": "complex",
      "migration_strategy": "Refactor to composition-based approach",
      "usage_type": "inheritance_inferred"
    },
    "MetaIndicator__PriceOscBase": {
      "metaclass_name": "MetaIndicator",
      "class_name": "_PriceOscBase",
      "file_path": "backtrader\\indicators\\priceoscillator.py",
      "priority": 4,
      "complexity": "complex",
      "migration_strategy": "Refactor to composition-based approach",
      "usage_type": "inheritance_inferred"
    },
    "MetaIndicator_UpDay": {
      "metaclass_name": "MetaIndicator",
      "class_name": "UpDay",
      "file_path": "backtrader\\indicators\\rsi.py",
      "priority": 4,
      "complexity": "complex",
      "migration_strategy": "Refactor to composition-based approach",
      "usage_type": "inheritance_inferred"
    },
    "MetaIndicator_DownDay": {
      "metaclass_name": "MetaIndicator",
      "class_name": "DownDay",
      "file_path": "backtrader\\indicators\\rsi.py",
      "priority": 4,
      "complexity": "complex",
      "migration_strategy": "Refactor to composition-based approach",
      "usage_type": "inheritance_inferred"
    },
    "MetaIndicator_UpDayBool": {
      "metaclass_name": "MetaIndicator",
      "class_name": "UpDayBool",
      "file_path": "backtrader\\indicators\\rsi.py",
      "priority": 4,
      "complexity": "complex",
      "migration_strategy": "Refactor to composition-based approach",
      "usage_type": "inheritance_inferred"
    },
    "MetaIndicator_DownDayBool": {
      "metaclass_name": "MetaIndicator",
      "class_name": "DownDayBool",
      "file_path": "backtrader\\indicators\\rsi.py",
      "priority": 4,
      "complexity": "complex",
      "migration_strategy": "Refactor to composition-based approach",
      "usage_type": "inheritance_inferred"
    },
    "MetaIndicator_RelativeStrengthIndex": {
      "metaclass_name": "MetaIndicator",
      "class_name": "RelativeStrengthIndex",
      "file_path": "backtrader\\indicators\\rsi.py",
      "priority": 4,
      "complexity": "complex",
      "migration_strategy": "Refactor to composition-based approach",
      "usage_type": "inheritance_inferred"
    },
    "MetaIndicator__StochasticBase": {
      "metaclass_name": "MetaIndicator",
      "class_name": "_StochasticBase",
      "file_path": "backtrader\\indicators\\stochastic.py",
      "priority": 4,
      "complexity": "complex",
      "migration_strategy": "Refactor to composition-based approach",
      "usage_type": "inheritance_inferred"
    },
    "MetaIndicator_Trix": {
      "metaclass_name": "MetaIndicator",
      "class_name": "Trix",
      "file_path": "backtrader\\indicators\\trix.py",
      "priority": 4,
      "complexity": "complex",
      "migration_strategy": "Refactor to composition-based approach",
      "usage_type": "inheritance_inferred"
    },
    "MetaIndicator_WilliamsR": {
      "metaclass_name": "MetaIndicator",
      "class_name": "WilliamsR",
      "file_path": "backtrader\\indicators\\williams.py",
      "priority": 4,
      "complexity": "complex",
      "migration_strategy": "Refactor to composition-based approach",
      "usage_type": "inheritance_inferred"
    },
    "MetaIndicator_WilliamsAD": {
      "metaclass_name": "MetaIndicator",
      "class_name": "WilliamsAD",
      "file_path": "backtrader\\indicators\\williams.py",
      "priority": 4,
      "complexity": "complex",
      "migration_strategy": "Refactor to composition-based approach",
      "usage_type": "inheritance_inferred"
    },
    "MetaObserver_Cash": {
      "metaclass_name": "MetaObserver",
      "class_name": "Cash",
      "file_path": "backtrader\\observers\\broker.py",
      "priority": 5,
      "complexity": "medium",
      "migration_strategy": "Manual refactoring required",
      "usage_type": "inheritance_inferred"
    },
    "MetaObserver_Value": {
      "metaclass_name": "MetaObserver",
      "class_name": "Value",
      "file_path": "backtrader\\observers\\broker.py",
      "priority": 5,
      "complexity": "medium",
      "migration_strategy": "Manual refactoring required",
      "usage_type": "inheritance_inferred"
    },
    "MetaObserver_Broker": {
      "metaclass_name": "MetaObserver",
      "class_name": "Broker",
      "file_path": "backtrader\\observers\\broker.py",
      "priority": 5,
      "complexity": "medium",
      "migration_strategy": "Manual refactoring required",
      "usage_type": "inheritance_inferred"
    },
    "MetaObserver_FundValue": {
      "metaclass_name": "MetaObserver",
      "class_name": "FundValue",
      "file_path": "backtrader\\observers\\broker.py",
      "priority": 5,
      "complexity": "medium",
      "migration_strategy": "Manual refactoring required",
      "usage_type": "inheritance_inferred"
    },
    "MetaObserver_FundShares": {
      "metaclass_name": "MetaObserver",
      "class_name": "FundShares",
      "file_path": "backtrader\\observers\\broker.py",
      "priority": 5,
      "complexity": "medium",
      "migration_strategy": "Manual refactoring required",
      "usage_type": "inheritance_inferred"
    },
    "MetaObserver_BuySell": {
      "metaclass_name": "MetaObserver",
      "class_name": "BuySell",
      "file_path": "backtrader\\observers\\buysell.py",
      "priority": 5,
      "complexity": "medium",
      "migration_strategy": "Manual refactoring required",
      "usage_type": "inheritance_inferred"
    },
    "MetaObserver_DrawDown": {
      "metaclass_name": "MetaObserver",
      "class_name": "DrawDown",
      "file_path": "backtrader\\observers\\drawdown.py",
      "priority": 5,
      "complexity": "medium",
      "migration_strategy": "Manual refactoring required",
      "usage_type": "inheritance_inferred"
    },
    "MetaObserver_DrawDownLength": {
      "metaclass_name": "MetaObserver",
      "class_name": "DrawDownLength",
      "file_path": "backtrader\\observers\\drawdown.py",
      "priority": 5,
      "complexity": "medium",
      "migration_strategy": "Manual refactoring required",
      "usage_type": "inheritance_inferred"
    },
    "MetaObserver_DrawDownOld": {
      "metaclass_name": "MetaObserver",
      "class_name": "DrawDownOld",
      "file_path": "backtrader\\observers\\drawdown.py",
      "priority": 5,
      "complexity": "medium",
      "migration_strategy": "Manual refactoring required",
      "usage_type": "inheritance_inferred"
    },
    "MetaObserver_TimeReturn": {
      "metaclass_name": "MetaObserver",
      "class_name": "TimeReturn",
      "file_path": "backtrader\\observers\\timereturn.py",
      "priority": 5,
      "complexity": "medium",
      "migration_strategy": "Manual refactoring required",
      "usage_type": "inheritance_inferred"
    },
    "MetaDataTrades_DataTrades": {
      "metaclass_name": "MetaDataTrades",
      "class_name": "DataTrades",
      "file_path": "backtrader\\observers\\trades.py",
      "priority": 3,
      "complexity": "simple",
      "migration_strategy": "Manual refactoring required",
      "usage_type": "explicit"
    },
    "MetaObserver_Trades": {
      "metaclass_name": "MetaObserver",
      "class_name": "Trades",
      "file_path": "backtrader\\observers\\trades.py",
      "priority": 5,
      "complexity": "medium",
      "migration_strategy": "Manual refactoring required",
      "usage_type": "inheritance_inferred"
    },
    "MetaObserver_DataTrades": {
      "metaclass_name": "MetaObserver",
      "class_name": "DataTrades",
      "file_path": "backtrader\\observers\\trades.py",
      "priority": 5,
      "complexity": "medium",
      "migration_strategy": "Manual refactoring required",
      "usage_type": "inheritance_inferred"
    },
    "MetaParams_Plot_OldSync": {
      "metaclass_name": "MetaParams",
      "class_name": "Plot_OldSync",
      "file_path": "backtrader\\plot\\plot.py",
      "priority": 1,
      "complexity": "medium",
      "migration_strategy": "Replace with ParameterDescriptor",
      "usage_type": "explicit"
    },
    "MetaSingleton_CCXTStore": {
      "metaclass_name": "MetaSingleton",
      "class_name": "CCXTStore",
      "file_path": "backtrader\\stores\\ccxtstore.py",
      "priority": 2,
      "complexity": "simple",
      "migration_strategy": "Replace with SingletonMixin",
      "usage_type": "inheritance_regex"
    },
    "MetaSingleton_CryptoStore": {
      "metaclass_name": "MetaSingleton",
      "class_name": "CryptoStore",
      "file_path": "backtrader\\stores\\cryptostore.py",
      "priority": 2,
      "complexity": "simple",
      "migration_strategy": "Replace with SingletonMixin",
      "usage_type": "inheritance_regex"
    },
    "MetaSingleton_CTPStore": {
      "metaclass_name": "MetaSingleton",
      "class_name": "CTPStore",
      "file_path": "backtrader\\stores\\ctpstore.py",
      "priority": 2,
      "complexity": "simple",
      "migration_strategy": "Replace with SingletonMixin",
      "usage_type": "explicit"
    },
    "MetaSingleton_IBStore": {
      "metaclass_name": "MetaSingleton",
      "class_name": "IBStore",
      "file_path": "backtrader\\stores\\ibstore.py",
      "priority": 2,
      "complexity": "simple",
      "migration_strategy": "Replace with SingletonMixin",
      "usage_type": "explicit"
    },
    "MetaSingleton_OandaStore": {
      "metaclass_name": "MetaSingleton",
      "class_name": "OandaStore",
      "file_path": "backtrader\\stores\\oandastore.py",
      "priority": 2,
      "complexity": "simple",
      "migration_strategy": "Replace with SingletonMixin",
      "usage_type": "explicit"
    },
    "MetaSingleton_VCStore": {
      "metaclass_name": "MetaSingleton",
      "class_name": "VCStore",
      "file_path": "backtrader\\stores\\vcstore.py",
      "priority": 2,
      "complexity": "simple",
      "migration_strategy": "Replace with SingletonMixin",
      "usage_type": "inheritance_regex"
    },
    "special_method___new___metaclass": {
      "metaclass_name": "special_method___new__",
      "class_name": "metaclass",
      "file_path": "backtrader\\utils\\py3.py",
      "priority": 5,
      "complexity": "simple",
      "migration_strategy": "Manual refactoring required",
      "usage_type": "special_method"
    }
  },
  "file_analysis": {
    "backtrader\\analyzer.py": {
      "metaclass_count": 4,
      "dynamic_creation_count": 0,
      "complexity_score": 6.0
    },
    "backtrader\\broker.py": {
      "metaclass_count": 2,
      "dynamic_creation_count": 0,
      "complexity_score": 4.0
    },
    "backtrader\\cerebro.py": {
      "metaclass_count": 1,
      "dynamic_creation_count": 0,
      "complexity_score": 2.0
    },
    "backtrader\\comminfo.py": {
      "metaclass_count": 1,
      "dynamic_creation_count": 0,
      "complexity_score": 2.0
    },
    "backtrader\\compile_cython_numba_files.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\dataseries.py": {
      "metaclass_count": 1,
      "dynamic_creation_count": 0,
      "complexity_score": 3.0
    },
    "backtrader\\errors.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\feed.py": {
      "metaclass_count": 3,
      "dynamic_creation_count": 0,
      "complexity_score": 3.0
    },
    "backtrader\\fillers.py": {
      "metaclass_count": 3,
      "dynamic_creation_count": 0,
      "complexity_score": 6.0
    },
    "backtrader\\flt.py": {
      "metaclass_count": 2,
      "dynamic_creation_count": 0,
      "complexity_score": 4.0
    },
    "backtrader\\functions.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\indicator.py": {
      "metaclass_count": 2,
      "dynamic_creation_count": 0,
      "complexity_score": 6.0
    },
    "backtrader\\linebuffer.py": {
      "metaclass_count": 1,
      "dynamic_creation_count": 0,
      "complexity_score": 1.0
    },
    "backtrader\\lineiterator.py": {
      "metaclass_count": 4,
      "dynamic_creation_count": 1,
      "complexity_score": 9.0
    },
    "backtrader\\lineroot.py": {
      "metaclass_count": 1,
      "dynamic_creation_count": 0,
      "complexity_score": 1.0
    },
    "backtrader\\lineseries.py": {
      "metaclass_count": 5,
      "dynamic_creation_count": 3,
      "complexity_score": 20.0
    },
    "backtrader\\mathsupport.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\observer.py": {
      "metaclass_count": 1,
      "dynamic_creation_count": 0,
      "complexity_score": 2.0
    },
    "backtrader\\order.py": {
      "metaclass_count": 1,
      "dynamic_creation_count": 0,
      "complexity_score": 2.0
    },
    "backtrader\\position.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\resamplerfilter.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\signal.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\sizer.py": {
      "metaclass_count": 1,
      "dynamic_creation_count": 0,
      "complexity_score": 2.0
    },
    "backtrader\\store.py": {
      "metaclass_count": 2,
      "dynamic_creation_count": 0,
      "complexity_score": 3.0
    },
    "backtrader\\strategy.py": {
      "metaclass_count": 6,
      "dynamic_creation_count": 0,
      "complexity_score": 12.0
    },
    "backtrader\\talib.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 1,
      "complexity_score": 3.0
    },
    "backtrader\\timer.py": {
      "metaclass_count": 1,
      "dynamic_creation_count": 0,
      "complexity_score": 2.0
    },
    "backtrader\\trade.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\tradingcal.py": {
      "metaclass_count": 1,
      "dynamic_creation_count": 0,
      "complexity_score": 2.0
    },
    "backtrader\\version.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\writer.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\__init__.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\analyzers\\annualreturn.py": {
      "metaclass_count": 2,
      "dynamic_creation_count": 0,
      "complexity_score": 4.0
    },
    "backtrader\\analyzers\\calmar.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\analyzers\\drawdown.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\analyzers\\leverage.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\analyzers\\logreturnsrolling.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\analyzers\\periodstats.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\analyzers\\positions.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\analyzers\\pyfolio.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\analyzers\\returns.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\analyzers\\sharpe.py": {
      "metaclass_count": 1,
      "dynamic_creation_count": 0,
      "complexity_score": 2.0
    },
    "backtrader\\analyzers\\sharpe_ratio_stats.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\analyzers\\sqn.py": {
      "metaclass_count": 1,
      "dynamic_creation_count": 0,
      "complexity_score": 2.0
    },
    "backtrader\\analyzers\\timereturn.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\analyzers\\total_value.py": {
      "metaclass_count": 1,
      "dynamic_creation_count": 0,
      "complexity_score": 2.0
    },
    "backtrader\\analyzers\\tradeanalyzer.py": {
      "metaclass_count": 1,
      "dynamic_creation_count": 0,
      "complexity_score": 2.0
    },
    "backtrader\\analyzers\\transactions.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\analyzers\\vwr.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\analyzers\\__init__.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\brokers\\bbroker.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\brokers\\ccxtbroker.py": {
      "metaclass_count": 2,
      "dynamic_creation_count": 0,
      "complexity_score": 3.0
    },
    "backtrader\\brokers\\cryptobroker.py": {
      "metaclass_count": 2,
      "dynamic_creation_count": 0,
      "complexity_score": 3.0
    },
    "backtrader\\brokers\\ctpbroker.py": {
      "metaclass_count": 2,
      "dynamic_creation_count": 0,
      "complexity_score": 3.0
    },
    "backtrader\\brokers\\ibbroker.py": {
      "metaclass_count": 2,
      "dynamic_creation_count": 0,
      "complexity_score": 3.0
    },
    "backtrader\\brokers\\oandabroker.py": {
      "metaclass_count": 2,
      "dynamic_creation_count": 0,
      "complexity_score": 3.0
    },
    "backtrader\\brokers\\vcbroker.py": {
      "metaclass_count": 2,
      "dynamic_creation_count": 0,
      "complexity_score": 3.0
    },
    "backtrader\\brokers\\__init__.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\btrun\\btrun.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\btrun\\__init__.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\commissions\\dc_commission.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\commissions\\__init__.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\feeds\\blaze.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\feeds\\btcsv.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\feeds\\ccxtfeed.py": {
      "metaclass_count": 2,
      "dynamic_creation_count": 0,
      "complexity_score": 2.0
    },
    "backtrader\\feeds\\chainer.py": {
      "metaclass_count": 1,
      "dynamic_creation_count": 0,
      "complexity_score": 1.0
    },
    "backtrader\\feeds\\cryptofeed.py": {
      "metaclass_count": 2,
      "dynamic_creation_count": 0,
      "complexity_score": 2.0
    },
    "backtrader\\feeds\\csvgeneric.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\feeds\\ctpdata.py": {
      "metaclass_count": 2,
      "dynamic_creation_count": 0,
      "complexity_score": 2.0
    },
    "backtrader\\feeds\\ibdata.py": {
      "metaclass_count": 2,
      "dynamic_creation_count": 0,
      "complexity_score": 2.0
    },
    "backtrader\\feeds\\influxfeed.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\feeds\\mt4csv.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\feeds\\oanda.py": {
      "metaclass_count": 2,
      "dynamic_creation_count": 0,
      "complexity_score": 2.0
    },
    "backtrader\\feeds\\pandafeed.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\feeds\\quandl.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\feeds\\rollover.py": {
      "metaclass_count": 1,
      "dynamic_creation_count": 0,
      "complexity_score": 1.0
    },
    "backtrader\\feeds\\sierrachart.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\feeds\\vcdata.py": {
      "metaclass_count": 2,
      "dynamic_creation_count": 0,
      "complexity_score": 2.0
    },
    "backtrader\\feeds\\vchart.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\feeds\\vchartcsv.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\feeds\\vchartfile.py": {
      "metaclass_count": 1,
      "dynamic_creation_count": 0,
      "complexity_score": 1.0
    },
    "backtrader\\feeds\\yahoo.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\feeds\\__init__.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\filters\\bsplitter.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\filters\\calendardays.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\filters\\datafiller.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\filters\\datafilter.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\filters\\daysteps.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\filters\\heikinashi.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\filters\\renko.py": {
      "metaclass_count": 1,
      "dynamic_creation_count": 0,
      "complexity_score": 2.0
    },
    "backtrader\\filters\\session.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\filters\\__init__.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\indicators\\accdecoscillator.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\indicators\\aroon.py": {
      "metaclass_count": 1,
      "dynamic_creation_count": 0,
      "complexity_score": 3.0
    },
    "backtrader\\indicators\\atr.py": {
      "metaclass_count": 4,
      "dynamic_creation_count": 0,
      "complexity_score": 12.0
    },
    "backtrader\\indicators\\awesomeoscillator.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\indicators\\basicops.py": {
      "metaclass_count": 2,
      "dynamic_creation_count": 0,
      "complexity_score": 6.0
    },
    "backtrader\\indicators\\bollinger.py": {
      "metaclass_count": 1,
      "dynamic_creation_count": 0,
      "complexity_score": 3.0
    },
    "backtrader\\indicators\\cci.py": {
      "metaclass_count": 1,
      "dynamic_creation_count": 0,
      "complexity_score": 3.0
    },
    "backtrader\\indicators\\crossover.py": {
      "metaclass_count": 3,
      "dynamic_creation_count": 0,
      "complexity_score": 9.0
    },
    "backtrader\\indicators\\dema.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\indicators\\deviation.py": {
      "metaclass_count": 2,
      "dynamic_creation_count": 0,
      "complexity_score": 6.0
    },
    "backtrader\\indicators\\directionalmove.py": {
      "metaclass_count": 3,
      "dynamic_creation_count": 0,
      "complexity_score": 9.0
    },
    "backtrader\\indicators\\dma.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\indicators\\dpo.py": {
      "metaclass_count": 1,
      "dynamic_creation_count": 0,
      "complexity_score": 3.0
    },
    "backtrader\\indicators\\dv2.py": {
      "metaclass_count": 1,
      "dynamic_creation_count": 0,
      "complexity_score": 3.0
    },
    "backtrader\\indicators\\ema.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\indicators\\envelope.py": {
      "metaclass_count": 1,
      "dynamic_creation_count": 1,
      "complexity_score": 6.0
    },
    "backtrader\\indicators\\hadelta.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\indicators\\heikinashi.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\indicators\\hma.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\indicators\\hurst.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\indicators\\ichimoku.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\indicators\\kama.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\indicators\\kst.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\indicators\\lrsi.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\indicators\\mabase.py": {
      "metaclass_count": 3,
      "dynamic_creation_count": 0,
      "complexity_score": 5.0
    },
    "backtrader\\indicators\\macd.py": {
      "metaclass_count": 1,
      "dynamic_creation_count": 0,
      "complexity_score": 3.0
    },
    "backtrader\\indicators\\momentum.py": {
      "metaclass_count": 4,
      "dynamic_creation_count": 0,
      "complexity_score": 12.0
    },
    "backtrader\\indicators\\myind.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\indicators\\ols.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\indicators\\oscillator.py": {
      "metaclass_count": 2,
      "dynamic_creation_count": 1,
      "complexity_score": 9.0
    },
    "backtrader\\indicators\\percentchange.py": {
      "metaclass_count": 1,
      "dynamic_creation_count": 0,
      "complexity_score": 3.0
    },
    "backtrader\\indicators\\percentrank.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\indicators\\pivotpoint.py": {
      "metaclass_count": 3,
      "dynamic_creation_count": 0,
      "complexity_score": 9.0
    },
    "backtrader\\indicators\\prettygoodoscillator.py": {
      "metaclass_count": 1,
      "dynamic_creation_count": 0,
      "complexity_score": 3.0
    },
    "backtrader\\indicators\\priceoscillator.py": {
      "metaclass_count": 1,
      "dynamic_creation_count": 0,
      "complexity_score": 3.0
    },
    "backtrader\\indicators\\psar.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\indicators\\rmi.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\indicators\\rsi.py": {
      "metaclass_count": 5,
      "dynamic_creation_count": 0,
      "complexity_score": 15.0
    },
    "backtrader\\indicators\\sma.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\indicators\\smma.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\indicators\\stochastic.py": {
      "metaclass_count": 1,
      "dynamic_creation_count": 0,
      "complexity_score": 3.0
    },
    "backtrader\\indicators\\trix.py": {
      "metaclass_count": 1,
      "dynamic_creation_count": 0,
      "complexity_score": 3.0
    },
    "backtrader\\indicators\\tsi.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\indicators\\ultimateoscillator.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\indicators\\vortex.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\indicators\\williams.py": {
      "metaclass_count": 2,
      "dynamic_creation_count": 0,
      "complexity_score": 6.0
    },
    "backtrader\\indicators\\wma.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\indicators\\zlema.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\indicators\\zlind.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\indicators\\__init__.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\indicators\\contrib\\vortex.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\indicators\\contrib\\__init__.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\observers\\benchmark.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\observers\\broker.py": {
      "metaclass_count": 5,
      "dynamic_creation_count": 0,
      "complexity_score": 10.0
    },
    "backtrader\\observers\\buysell.py": {
      "metaclass_count": 1,
      "dynamic_creation_count": 0,
      "complexity_score": 2.0
    },
    "backtrader\\observers\\drawdown.py": {
      "metaclass_count": 3,
      "dynamic_creation_count": 0,
      "complexity_score": 6.0
    },
    "backtrader\\observers\\logreturns.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\observers\\timereturn.py": {
      "metaclass_count": 1,
      "dynamic_creation_count": 0,
      "complexity_score": 2.0
    },
    "backtrader\\observers\\trades.py": {
      "metaclass_count": 3,
      "dynamic_creation_count": 0,
      "complexity_score": 5.0
    },
    "backtrader\\observers\\__init__.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\plot\\finance.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\plot\\formatters.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\plot\\locator.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\plot\\multicursor.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\plot\\plot.py": {
      "metaclass_count": 1,
      "dynamic_creation_count": 0,
      "complexity_score": 2.0
    },
    "backtrader\\plot\\scheme.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\plot\\utils.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\plot\\__init__.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\signals\\__init__.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\sizers\\fixedsize.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\sizers\\percents_sizer.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\sizers\\__init__.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\stores\\cryptostore.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\stores\\ctpstore.py": {
      "metaclass_count": 2,
      "dynamic_creation_count": 1,
      "complexity_score": 5.0
    },
    "backtrader\\stores\\ibstore.py": {
      "metaclass_count": 2,
      "dynamic_creation_count": 0,
      "complexity_score": 3.0
    },
    "backtrader\\stores\\oandastore.py": {
      "metaclass_count": 2,
      "dynamic_creation_count": 0,
      "complexity_score": 3.0
    },
    "backtrader\\stores\\vchartfile.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\stores\\__init__.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\utils\\cython_config.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\utils\\date.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\utils\\dateintern.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\utils\\flushfile.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\utils\\fractal.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\utils\\log_message.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\utils\\ordereddefaultdict.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\utils\\py3.py": {
      "metaclass_count": 1,
      "dynamic_creation_count": 0,
      "complexity_score": 1.0
    },
    "backtrader\\utils\\__init__.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\utils\\cal_performance_indicators\\cal_by_numba.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\utils\\cal_performance_indicators\\setup.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\utils\\cal_performance_indicators\\test_time_consume.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\utils\\cs_cal_value\\setup.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\utils\\cs_long_short_signals\\cal_by_numba.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\utils\\cs_long_short_signals\\setup.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\utils\\my_corr\\setup.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\utils\\my_corr\\__init__.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\utils\\ts_cal_value\\cal_by_numba.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\utils\\ts_cal_value\\setup.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\vectors\\cal_functions.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\vectors\\cs.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\vectors\\ts.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "backtrader\\vectors\\__init__.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "examples\\__init__.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "studies\\__init__.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    },
    "studies\\contrib\\__init__.py": {
      "metaclass_count": 0,
      "dynamic_creation_count": 0,
      "complexity_score": 0.0
    }
  },
  "recommendations": [
    "元类使用较多，建议分阶段进行迁移",
    "优先处理86个高优先级迁移项",
    "仔细规划60个复杂迁移项",
    "发现动态类创建，需要特殊处理"
  ]
}